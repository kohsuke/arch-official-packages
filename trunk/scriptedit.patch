--- ScriptEdit.cpp.bak	2009-05-13 23:14:51.109362860 +0200
+++ ScriptEdit.cpp	2009-05-13 23:14:58.482710429 +0200
@@ -30,7 +30,7 @@
 #include "Note.h"
 #include "PythonSyntaxHighlighter.h"
 #include "FindReplaceDialog.h"
-#include <ApplicationWindow.h>
+#include <ApplicationWindow.h>
 
 #include <QAction>
 #include <QMenu>
@@ -39,13 +39,13 @@
 #include <QMessageBox>
 #include <QFileDialog>
 #include <QTextStream>
-#include <QApplication>
-#include <QCompleter>
+#include <QApplication>
+#include <QCompleter>
 #include <QAbstractItemView>
-#include <QScrollBar>
+#include <QScrollBar>
 #include <QStringListModel>
-#include <QShortcut>
-#include <QDockWidget>
+#include <QShortcut>
+#include <QDockWidget>
 
 ScriptEdit::ScriptEdit(ScriptingEnv *env, QWidget *parent, const char *name)
   : QTextEdit(parent, name), scripted(env), d_error(false), d_completer(0),
@@ -147,69 +147,69 @@
 		connect(myScript, SIGNAL(error(const QString&, const QString&, int)), this, SLOT(insertErrorMsg(const QString&)));
 		connect(myScript, SIGNAL(print(const QString&)), this, SLOT(scriptPrint(const QString&)));
 
-	#ifdef SCRIPTING_PYTHON
-		if (d_highlighter)
-			delete d_highlighter;
-
-		if (scriptEnv->name() == QString("Python"))
-			d_highlighter = new PythonSyntaxHighlighter(this);
-		else
+	#ifdef SCRIPTING_PYTHON
+		if (d_highlighter)
+			delete d_highlighter;
+
+		if (scriptEnv->name() == QString("Python"))
+			d_highlighter = new PythonSyntaxHighlighter(this);
+		else
 			d_highlighter = 0;
 	#endif
 	}
 }
-
-void ScriptEdit::focusInEvent(QFocusEvent *e)
-{
-     if (d_completer)
-         d_completer->setWidget(this);
-     QTextEdit::focusInEvent(e);
-}
+
+void ScriptEdit::focusInEvent(QFocusEvent *e)
+{
+     if (d_completer)
+         d_completer->setWidget(this);
+     QTextEdit::focusInEvent(e);
+}
 
 void ScriptEdit::keyPressEvent(QKeyEvent *e)
-{
-    if (d_completer && d_completer->popup()->isVisible()) {
-         // The following keys are forwarded by the completer to the widget
-        switch (e->key()) {
-        case Qt::Key_Enter:
-        case Qt::Key_Return:
-        case Qt::Key_Escape:
-        case Qt::Key_Tab:
-        case Qt::Key_Backtab:
-             e->ignore();
-             return; // let the completer do default behavior
-        default:
-            break;
-        }
-     }
-
-    QTextEdit::keyPressEvent(e);
-    if (d_completer && !d_completer->popup()->isVisible() && e->key() == Qt::Key_Return)
-        updateIndentation();
-
-     bool isShortcut = ((e->modifiers() & Qt::ControlModifier) && e->key() == Qt::Key_U); // CTRL+U
-     const bool ctrlOrShift = e->modifiers() & (Qt::ControlModifier | Qt::ShiftModifier);
-     if (!d_completer || (ctrlOrShift && e->text().isEmpty()))
-         return;
-
-     static QString eow("~!@#$%^&*()_+{}|:\"<>?,./;'[]\\-="); // end of word
-     bool hasModifier = (e->modifiers() != Qt::NoModifier) && !ctrlOrShift;
-     QString completionPrefix = textUnderCursor();
-
-     if (!isShortcut && (hasModifier || e->text().isEmpty()|| completionPrefix.length() < 2
-                       || eow.contains(e->text().right(1)))) {
-         d_completer->popup()->hide();
-         return;
-     }
-
-     if (completionPrefix != d_completer->completionPrefix()) {
-         d_completer->setCompletionPrefix(completionPrefix);
-         d_completer->popup()->setCurrentIndex(d_completer->completionModel()->index(0, 0));
-     }
-
-     QRect cr = cursorRect();
-     cr.setWidth(d_completer->popup()->sizeHintForColumn(0)
-                 + d_completer->popup()->verticalScrollBar()->sizeHint().width());
+{
+    if (d_completer && d_completer->popup()->isVisible()) {
+         // The following keys are forwarded by the completer to the widget
+        switch (e->key()) {
+        case Qt::Key_Enter:
+        case Qt::Key_Return:
+        case Qt::Key_Escape:
+        case Qt::Key_Tab:
+        case Qt::Key_Backtab:
+             e->ignore();
+             return; // let the completer do default behavior
+        default:
+            break;
+        }
+     }
+
+    QTextEdit::keyPressEvent(e);
+    if (d_completer && !d_completer->popup()->isVisible() && e->key() == Qt::Key_Return)
+        updateIndentation();
+
+     bool isShortcut = ((e->modifiers() & Qt::ControlModifier) && e->key() == Qt::Key_U); // CTRL+U
+     const bool ctrlOrShift = e->modifiers() & (Qt::ControlModifier | Qt::ShiftModifier);
+     if (!d_completer || (ctrlOrShift && e->text().isEmpty()))
+         return;
+
+     static QString eow("~!@#$%^&*()_+{}|:\"<>?,./;'[]\\-="); // end of word
+     bool hasModifier = (e->modifiers() != Qt::NoModifier) && !ctrlOrShift;
+     QString completionPrefix = textUnderCursor();
+
+     if (!isShortcut && (hasModifier || e->text().isEmpty()|| completionPrefix.length() < 2
+                       || eow.contains(e->text().right(1)))) {
+         d_completer->popup()->hide();
+         return;
+     }
+
+     if (completionPrefix != d_completer->completionPrefix()) {
+         d_completer->setCompletionPrefix(completionPrefix);
+         d_completer->popup()->setCurrentIndex(d_completer->completionModel()->index(0, 0));
+     }
+
+     QRect cr = cursorRect();
+     cr.setWidth(d_completer->popup()->sizeHintForColumn(0)
+                 + d_completer->popup()->verticalScrollBar()->sizeHint().width());
      d_completer->complete(cr); // popup it up!
 }
 
@@ -285,20 +285,20 @@
 {
 	QString err = message;
 	err.prepend("\n").replace("\n","\n#> ");
-
-#ifdef SCRIPTING_CONSOLE
-	QTextEdit *console = scriptEnv->application()->scriptingConsole();
-	console->setPlainText(err);
-	if (!console->isVisible())
-		((QDockWidget *)console->parent())->show();
-#elif
-	int start = printCursor.position();
-	printCursor.insertText(err);
-	printCursor.setPosition(start, QTextCursor::KeepAnchor);
-	setTextCursor(printCursor);
-#endif
 
-	d_error = true;
+#ifdef SCRIPTING_CONSOLE
+	QTextEdit *console = scriptEnv->application()->scriptingConsole();
+	console->setPlainText(err);
+	if (!console->isVisible())
+		((QDockWidget *)console->parent())->show();
+#else
+	int start = printCursor.position();
+	printCursor.insertText(err);
+	printCursor.setPosition(start, QTextCursor::KeepAnchor);
+	setTextCursor(printCursor);
+#endif
+
+	d_error = true;
 	d_err_message = message;
 }
 
@@ -339,8 +339,8 @@
 }
 
 void ScriptEdit::execute()
-{
-	clearErrorHighlighting();
+{
+	clearErrorHighlighting();
 
 	QString fname = "<%1:%2>";
 	fname = fname.arg(name());
@@ -348,7 +348,7 @@
 	if (codeCursor.selectedText().isEmpty()){
 		codeCursor.movePosition(QTextCursor::StartOfLine, QTextCursor::MoveAnchor);
 		codeCursor.movePosition(QTextCursor::EndOfLine, QTextCursor::KeepAnchor);
-	}
+	}
 	int startLineNumber = lineNumber(codeCursor.selectionStart());
 	fname = fname.arg(startLineNumber);
 
@@ -363,8 +363,8 @@
 }
 
 void ScriptEdit::executeAll()
-{
-	clearErrorHighlighting();
+{
+	clearErrorHighlighting();
 
 	QString fname = "<%1>";
 	fname = fname.arg(name());
@@ -377,8 +377,8 @@
 }
 
 void ScriptEdit::evaluate()
-{
-	clearErrorHighlighting();
+{
+	clearErrorHighlighting();
 
 	QString fname = "<%1:%2>";
 	fname = fname.arg(name());
@@ -386,7 +386,7 @@
 	if (codeCursor.selectedText().isEmpty()){
 		codeCursor.movePosition(QTextCursor::StartOfLine, QTextCursor::MoveAnchor);
 		codeCursor.movePosition(QTextCursor::EndOfLine, QTextCursor::KeepAnchor);
-	}
+	}
 	int startLineNumber = lineNumber(codeCursor.selectionStart());
 	fname = fname.arg(startLineNumber);
 
@@ -406,7 +406,7 @@
 			if (!strVal.isEmpty())
 				 printCursor.insertText("#> " + strVal + "\n");
 		}
-
+
 	highlightErrorLine(startLineNumber - 2);//we need to substract a line due to __doit__ line prepended to Python scripts.
 	d_error = false;
 }
@@ -463,16 +463,16 @@
 	clear();
 	QTextStream ts(&file);
 	ts.setEncoding(QTextStream::UnicodeUTF8);
-
-    QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
-    qApp->processEvents(QEventLoop::ExcludeUserInput);
-
-    blockSignals(true);
-    insertPlainText(ts.readAll());
-    blockSignals(false);
-    textChanged();
 
-	file.close();
+    QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
+    qApp->processEvents(QEventLoop::ExcludeUserInput);
+
+    blockSignals(true);
+    insertPlainText(ts.readAll());
+    blockSignals(false);
+    textChanged();
+
+	file.close();
 	QApplication::restoreOverrideCursor();
 	return f;
 }
@@ -555,40 +555,40 @@
 
 	scriptsDirPath = path;
 }
-
- void ScriptEdit::setCompleter(QCompleter *completer)
- {
-     if (d_completer)
-         QObject::disconnect(d_completer, 0, this, 0);
-
-     d_completer = completer;
-
-     if (!d_completer)
-         return;
-
-     d_completer->setWidget(this);
-     QObject::connect(d_completer, SIGNAL(activated(const QString&)),
-                      this, SLOT(insertCompletion(const QString&)));
- }
-
- void ScriptEdit::insertCompletion(const QString& completion)
- {
-     if (d_completer->widget() != this)
+
+ void ScriptEdit::setCompleter(QCompleter *completer)
+ {
+     if (d_completer)
+         QObject::disconnect(d_completer, 0, this, 0);
+
+     d_completer = completer;
+
+     if (!d_completer)
+         return;
+
+     d_completer->setWidget(this);
+     QObject::connect(d_completer, SIGNAL(activated(const QString&)),
+                      this, SLOT(insertCompletion(const QString&)));
+ }
+
+ void ScriptEdit::insertCompletion(const QString& completion)
+ {
+     if (d_completer->widget() != this)
          return;
 
-	 QTextCursor tc = textCursor();
-     int extra = completion.length() - d_completer->completionPrefix().length();
-     tc.movePosition(QTextCursor::Left);
-     tc.movePosition(QTextCursor::EndOfWord);
-     tc.insertText(completion.right(extra));
-     setTextCursor(tc);
- }
-
- QString ScriptEdit::textUnderCursor() const
- {
-     QTextCursor tc = textCursor();
-     tc.select(QTextCursor::WordUnderCursor);
-     return tc.selectedText();
+	 QTextCursor tc = textCursor();
+     int extra = completion.length() - d_completer->completionPrefix().length();
+     tc.movePosition(QTextCursor::Left);
+     tc.movePosition(QTextCursor::EndOfWord);
+     tc.insertText(completion.right(extra));
+     setTextCursor(tc);
+ }
+
+ QString ScriptEdit::textUnderCursor() const
+ {
+     QTextCursor tc = textCursor();
+     tc.select(QTextCursor::WordUnderCursor);
+     return tc.selectedText();
  }
 
 
@@ -660,41 +660,41 @@
 	else
 		showFindDialog();
 }
-
-void ScriptEdit::clearErrorHighlighting()
-{
-	QTextCursor codeCursor = textCursor();
-	codeCursor.movePosition(QTextCursor::Start, QTextCursor::MoveAnchor);
-	codeCursor.movePosition(QTextCursor::End, QTextCursor::KeepAnchor);
-	codeCursor.mergeBlockFormat(d_fmt_default);
-}
-
-void ScriptEdit::highlightErrorLine(int offset)
-{
-	if (!d_error)
-		return;
-
-	QTextCursor codeCursor = textCursor();
-	codeCursor.movePosition(QTextCursor::Start, QTextCursor::MoveAnchor);
-
-	if (scriptEnv->name() == QString("Python")){
-		QRegExp rx("<*>:(\\d+)");
-		rx.indexIn(d_err_message);
-		QStringList list = rx.capturedTexts();
-		int lineNumber = 0;
-		if (!list.isEmpty())
-			lineNumber = list.last().toInt();
-
-		codeCursor.movePosition(QTextCursor::Down, QTextCursor::MoveAnchor, offset + lineNumber - 1);
-		codeCursor.movePosition(QTextCursor::EndOfLine, QTextCursor::KeepAnchor);
-	} else
-		codeCursor.movePosition(QTextCursor::End, QTextCursor::KeepAnchor);
-
-	QTextBlockFormat d_fmt_failure;
-	d_fmt_failure.setBackground(QBrush(QColor(255,128,128)));
-	codeCursor.mergeBlockFormat(d_fmt_failure);
-	setTextCursor(codeCursor);
-}
+
+void ScriptEdit::clearErrorHighlighting()
+{
+	QTextCursor codeCursor = textCursor();
+	codeCursor.movePosition(QTextCursor::Start, QTextCursor::MoveAnchor);
+	codeCursor.movePosition(QTextCursor::End, QTextCursor::KeepAnchor);
+	codeCursor.mergeBlockFormat(d_fmt_default);
+}
+
+void ScriptEdit::highlightErrorLine(int offset)
+{
+	if (!d_error)
+		return;
+
+	QTextCursor codeCursor = textCursor();
+	codeCursor.movePosition(QTextCursor::Start, QTextCursor::MoveAnchor);
+
+	if (scriptEnv->name() == QString("Python")){
+		QRegExp rx("<*>:(\\d+)");
+		rx.indexIn(d_err_message);
+		QStringList list = rx.capturedTexts();
+		int lineNumber = 0;
+		if (!list.isEmpty())
+			lineNumber = list.last().toInt();
+
+		codeCursor.movePosition(QTextCursor::Down, QTextCursor::MoveAnchor, offset + lineNumber - 1);
+		codeCursor.movePosition(QTextCursor::EndOfLine, QTextCursor::KeepAnchor);
+	} else
+		codeCursor.movePosition(QTextCursor::End, QTextCursor::KeepAnchor);
+
+	QTextBlockFormat d_fmt_failure;
+	d_fmt_failure.setBackground(QBrush(QColor(255,128,128)));
+	codeCursor.mergeBlockFormat(d_fmt_failure);
+	setTextCursor(codeCursor);
+}
 
 ScriptEdit::~ScriptEdit()
 {
