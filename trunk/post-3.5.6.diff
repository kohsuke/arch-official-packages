--- khtml/html/htmltokenizer.cpp
+++ khtml/html/htmltokenizer.cpp
@@ -316,7 +316,7 @@ void HTMLTokenizer::parseSpecial(Tokeniz
     while ( !src.isEmpty() ) {
         checkScriptBuffer();
         unsigned char ch = src->latin1();
-        if ( !scriptCodeResync && !brokenComments && !textarea && !xmp && !title && ch == '-' && scriptCodeSize >= 3 && !src.escaped() && QConstString( scriptCode+scriptCodeSize-3, 3 ).string() == "<!-" ) {
+        if ( !scriptCodeResync && !brokenComments && !textarea && !xmp && ch == '-' && scriptCodeSize >= 3 && !src.escaped() && QConstString( scriptCode+scriptCodeSize-3, 3 ).string() == "<!-" ) {
             comment = true;
             scriptCode[ scriptCodeSize++ ] = ch;
             ++src;
@@ -495,7 +495,7 @@ void HTMLTokenizer::parseComment(Tokeniz
 
             if (canClose || handleBrokenComments || scriptEnd ){
                 ++src;
-                if ( !( script || xmp || textarea || style) ) {
+                if ( !( title || script || xmp || textarea || style) ) {
 #ifdef COMMENTS_IN_DOM
                     checkScriptBuffer();
                     scriptCode[ scriptCodeSize ] = 0;
Index: ecma/kjs_html.cpp
===================================================================
--- khtml/ecma/kjs_html.cpp	(revision 637497)
+++ khtml/ecma/kjs_html.cpp	(working copy)
@@ -1866,10 +1866,12 @@
 				      getDOMNode(exec, frameElement.contentDocument()) : Undefined();
     case FrameContentWindow:   {
         KHTMLPart* part = static_cast<DOM::HTMLFrameElementImpl*>(frameElement.handle())->contentPart();
-        if (part)
-            return Value(Window::retrieveWindow(part));
-        else
-            return Undefined();
+        if (part) {
+          Window *w = Window::retrieveWindow(part);
+          if (w)
+            return Value(w);
+        }
+        return Undefined();
     }
     case FrameFrameBorder:     return String(frameElement.frameBorder());
     case FrameLongDesc:        return String(frameElement.longDesc());
@@ -1899,10 +1901,12 @@
 				       getDOMNode(exec, iFrame.contentDocument()) : Undefined();
     case IFrameContentWindow:       {
         KHTMLPart* part = static_cast<DOM::HTMLIFrameElementImpl*>(iFrame.handle())->contentPart();
-        if (part)
-            return Value(Window::retrieveWindow(part));
-        else
-            return Undefined();
+        if (part) {
+          Window *w = Window::retrieveWindow(part);
+          if (w)
+            return Value(w);
+        }
+        return Undefined();
     }
     case IFrameFrameBorder:     return String(iFrame.frameBorder());
     case IFrameHeight:          return String(iFrame.height());
--- kjs/regexp.cpp	2007/02/24 17:43:29	636920
+++ kjs/regexp.cpp	2007/02/24 20:03:49	636952
@@ -139,7 +139,7 @@
     pcreflags |= PCRE_MULTILINE;
 
   if (utf8Support == Supported)
-    pcreflags |= PCRE_UTF8;
+    pcreflags |= (PCRE_UTF8 | PCRE_NO_UTF8_CHECK);
 
   // Fill our buffer with an encoded version, whether utf-8, or, 
   // if PCRE is incapable, truncated.
@@ -329,8 +329,9 @@
     nextPos  = i + 1;
   }
 
+  int baseFlags = utf8Support == Supported ? PCRE_NO_UTF8_CHECK : 0;
   if (pcre_exec(pcregex, NULL, buffer, bufferSize, startPos,
-                m_notEmpty ? (PCRE_NOTEMPTY | PCRE_ANCHORED) : 0, // see man pcretest
+                m_notEmpty ? (PCRE_NOTEMPTY | PCRE_ANCHORED | baseFlags) : baseFlags, // see man pcretest
                 ovector ? *ovector : 0L, ovecsize) == PCRE_ERROR_NOMATCH)
   {
     // Failed to match.
@@ -343,7 +344,7 @@
       fprintf(stderr, "No match after m_notEmpty. +1 and keep going.\n");
 #endif
       m_notEmpty = 0;
-      if (pcre_exec(pcregex, NULL, buffer, bufferSize, nextPos, 0,
+      if (pcre_exec(pcregex, NULL, buffer, bufferSize, nextPos, baseFlags,
                     ovector ? *ovector : 0L, ovecsize) == PCRE_ERROR_NOMATCH)
         return UString::null;
     }
--- kioslave/ftp/ftp.cc
+++ kioslave/ftp/ftp.cc
@@ -58,6 +58,7 @@
 #include <kmimemagic.h>
 #include <kmimetype.h>
 #include <ksockaddr.h>
+#include <ksocketaddress.h>
 #include <kio/ioslave_defaults.h>
 #include <kio/slaveconfig.h>
 #include <kremoteencoding.h>
@@ -835,7 +836,6 @@ bool Ftp::ftpSendCmd( const QCString& cm
   return true;
 }
 
-
 /*
  * ftpOpenPASVDataConnection - set up data connection, using PASV mode
  *
@@ -853,6 +853,8 @@ int Ftp::ftpOpenPASVDataConnection()
   if (sa != NULL && sa->family() != PF_INET)
     return ERR_INTERNAL;       // no PASV for non-PF_INET connections
 
+  const KInetSocketAddress *sin = static_cast<const KInetSocketAddress*>(sa);
+
   if (m_extControl & pasvUnknown)
     return ERR_INTERNAL;       // already tried and got "unknown command"
 
@@ -886,14 +888,17 @@ int Ftp::ftpOpenPASVDataConnection()
   }
 
   // Make hostname and port number ...
-  QString host;
-  host.sprintf("%d.%d.%d.%d", i[0], i[1], i[2], i[3]);
   int port = i[4] << 8 | i[5];
 
+  // we ignore the host part on purpose for two reasons
+  // a) it might be wrong anyway
+  // b) it would make us being suceptible to a port scanning attack
+
   // now connect the data socket ...
   m_data = new FtpSocket("PASV");
-  m_data->setAddress(host, port);
-  kdDebug(7102) << "Connecting to " << host << " on port " << port << endl;
+  m_data->setAddress(sin->nodeName(), port);
+
+  kdDebug(7102) << "Connecting to " << sin->nodeName() << " on port " << port << endl;
   return m_data->connectSocket(connectTimeout(), false);
 }
 
------------------------------------------------------------------------
r645387 | porten | 2007-03-22 15:01:13 +0100 (Thu, 22 Mar 2007) | 4 lines

substitute some of the invalid sequences with the standard replacement
char. this matches Mozilla but not IE which leaves them unchanged (or
throws an exception)

------------------------------------------------------------------------
--- kjs/function.cpp
+++ kjs/function.cpp
@@ -244,11 +244,15 @@ UString decodeURI(ExecState *exec, UStri
       }
 
       // UTF-8 transform
+      const unsigned long replacementChar = 0xFFFD;
       unsigned long V;
       if (n == 2) {
 	unsigned long yyyyy = octets[0] & 0x1F;
 	unsigned long zzzzzz = octets[1] & 0x3F;
 	V = (yyyyy << 6) | zzzzzz;
+	// 2-byte sequence overlong for this value?
+	if (V < 0xFF)
+	  V = replacementChar;
 	C = UChar((unsigned short)V);
       }
       else if (n == 3) {
@@ -256,6 +260,11 @@ UString decodeURI(ExecState *exec, UStri
 	unsigned long yyyyyy = octets[1] & 0x3F;
 	unsigned long zzzzzz = octets[2] & 0x3F;
 	V = (xxxx << 12) | (yyyyyy << 6) | zzzzzz;
+	// 3-byte sequence overlong for this value,
+	// an invalid value or UTF-16 surrogate?
+	if (V < 0x800 || V == 0xFFFE || V == 0xFFFF ||
+	    (V >= 0xD800 && V <= 0xDFFF))
+	  V = replacementChar;
 	C = UChar((unsigned short)V);
       }
       else {
