--- oox/source/token/tokenmap.cxx	2009-09-28 06:35:40.000000000 +0000
+++ oox/source/token/tokenmap.cxx.new	2009-09-28 10:12:00.996437647 +0000
@@ -33,6 +33,7 @@
 #include <rtl/string.hxx>
 #include "tokens.hxx"
 #include "oox/helper/containerhelper.hxx"
+#include <string.h>
 
 using ::rtl::OString;
 using ::rtl::OUString;
--- lingucomponent/source/lingutil/lingutil.cxx	2010-01-01 14:51:14.000000000 +0000
+++ lingucomponent/source/lingutil/lingutil.cxx.new	2010-01-01 17:23:40.812325940 +0000
@@ -44,6 +44,7 @@
 #endif
 
 
+#include <string.h>
 #include <osl/thread.h>
 #include <osl/file.hxx>
 #include <tools/debug.hxx>
--- lingucomponent/source/thesaurus/libnth/nthesimp.cxx	2010-01-01 14:51:14.000000000 +0000
+++ lingucomponent/source/thesaurus/libnth/nthesimp.cxx.new	2010-01-02 09:45:13.229770814 +0000
@@ -32,6 +32,7 @@
 #include "precompiled_lingucomponent.hxx"
 
 // include <stdio.h>
+#include <string.h>
 #include <com/sun/star/uno/Reference.h>
 
 #include <cppuhelper/factory.hxx>	// helper for factories
--- lingucomponent/source/spellcheck/spell/sspellimp.cxx	2010-01-01 14:51:14.000000000 +0000
+++ lingucomponent/source/spellcheck/spell/sspellimp.cxx.new	2010-01-02 11:53:11.039003768 +0000
@@ -29,6 +29,7 @@
  ************************************************************************/
 
 // MARKER(update_precomp.py): autogen include statement, do not remove
+#include <string.h>
 #include "precompiled_lingucomponent.hxx"
 #include <com/sun/star/uno/Reference.h>
 #include <com/sun/star/linguistic2/XSearchableDictionaryList.hpp>
--- lingucomponent/source/hyphenator/altlinuxhyph/hyphen/hyphenimp.cxx	2010-01-01 14:51:14.000000000 +0000
+++ lingucomponent/source/hyphenator/altlinuxhyph/hyphen/hyphenimp.cxx.new	2010-01-02 14:09:02.014854702 +0000
@@ -31,7 +31,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_lingucomponent.hxx"
 
-
+#include <string.h>
 #include <com/sun/star/uno/Reference.h>
 #include <com/sun/star/linguistic2/XSearchableDictionaryList.hpp>
 
@@ -544,10 +544,10 @@
   char *lcword;
   int k;
 
-  PropertyHelper_Hyphen & rHelper = GetPropHelper();
-  rHelper.SetTmpPropVals(aProperties);
-  sal_Int16 minTrail = rHelper.GetMinTrailing();
-  sal_Int16 minLead = rHelper.GetMinLeading();
+  PropertyHelper_Hyphen & rHelper = GetPropHelper();
+  rHelper.SetTmpPropVals(aProperties);
+  sal_Int16 minTrail = rHelper.GetMinTrailing();
+  sal_Int16 minLead = rHelper.GetMinLeading();
 
   HyphenDict *dict = NULL;
   rtl_TextEncoding aEnc = 0;
@@ -621,9 +621,9 @@
       wordlen = encWord.getLength();
       lcword = new char[wordlen+1];
       hyphens = new char[wordlen+5];
-      char ** rep = NULL; // replacements of discretionary hyphenation
-      int * pos = NULL; // array of [hyphenation point] minus [deletion position] 
-      int * cut = NULL; // length of deletions in original word
+      char ** rep = NULL; // replacements of discretionary hyphenation
+      int * pos = NULL; // array of [hyphenation point] minus [deletion position] 
+      int * cut = NULL; // length of deletions in original word
 
       // copy converted word into simple char buffer
       strcpy(lcword,encWord.getStr());
@@ -634,21 +634,21 @@
       n++;
       // fprintf(stderr,"hyphenate... %s\n",lcword); fflush(stderr);
       if (n > 0) {
-         if (hnj_hyphen_hyphenate3(dict, lcword, n, hyphens, NULL, &rep, &pos, &cut,
-            minLead, minTrail, Max(dict->clhmin, Max(dict->clhmin, 2) + Max(0, minLead - Max(dict->lhmin, 2))),
-            Max(dict->crhmin, Max(dict->crhmin, 2) + Max(0, minTrail - Max(dict->rhmin, 2)))))
+         if (hnj_hyphen_hyphenate3(dict, lcword, n, hyphens, NULL, &rep, &pos, &cut,
+            minLead, minTrail, Max(dict->clhmin, Max(dict->clhmin, 2) + Max(0, minLead - Max(dict->lhmin, 2))),
+            Max(dict->crhmin, Max(dict->crhmin, 2) + Max(0, minTrail - Max(dict->rhmin, 2)))))
          {
              delete[] hyphens;
              delete[] lcword;
-
-             if (rep) {
-                 for(int j = 0; j < n; j++) {
-                     if (rep[j]) free(rep[j]);
-                 }
-                 free(rep);
-             }
-             if (pos) free(pos);
-             if (cut) free(cut);
+
+             if (rep) {
+                 for(int j = 0; j < n; j++) {
+                     if (rep[j]) free(rep[j]);
+                 }
+                 free(rep);
+             }
+             if (pos) free(pos);
+             if (cut) free(cut);
 
              return NULL;
          }
@@ -662,7 +662,7 @@
       INT16 i;
 
       for ( i = 0; i < encWord.getLength(); i++)
-        if (hyphens[i]&1 && (!rep || !rep[i]))
+        if (hyphens[i]&1 && (!rep || !rep[i]))
           nHyphCount++;
 
       Sequence< INT16 > aHyphPos(nHyphCount);
@@ -671,14 +671,14 @@
       OUString hyphenatedWord;
       nHyphCount = 0;
 
-      for (i = 0; i < nWord.getLength(); i++) {
+      for (i = 0; i < nWord.getLength(); i++) {
           hyphenatedWordBuffer.append(aWord[i]);
-          // hyphenation position (not alternative)
-          if (hyphens[i]&1 && (!rep || !rep[i])) {
-              pPos[nHyphCount] = i;
-              hyphenatedWordBuffer.append(sal_Unicode('='));
-              nHyphCount++;
-          }
+          // hyphenation position (not alternative)
+          if (hyphens[i]&1 && (!rep || !rep[i])) {
+              pPos[nHyphCount] = i;
+              hyphenatedWordBuffer.append(sal_Unicode('='));
+              nHyphCount++;
+          }
       }
 
       hyphenatedWord = hyphenatedWordBuffer.makeStringAndClear();
@@ -690,15 +690,15 @@
 
       delete[] hyphens;
       delete[] lcword;
-
-      if (rep) {
-          for(int j = 0; j < n; j++) {
-              if (rep[j]) free(rep[j]);
-          }
-          free(rep);
-      }
-      if (pos) free(pos);
-      if (cut) free(cut);
+
+      if (rep) {
+          for(int j = 0; j < n; j++) {
+              if (rep[j]) free(rep[j]);
+          }
+          free(rep);
+      }
+      if (pos) free(pos);
+      if (cut) free(cut);
 
       return xRes;
   }
