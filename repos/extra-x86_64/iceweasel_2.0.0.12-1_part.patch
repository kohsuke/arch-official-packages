--- iceweasel-2.0.0.12.orig/gfx/src/gtk/nsFontMetricsPango.cpp
+++ iceweasel-2.0.0.12/gfx/src/gtk/nsFontMetricsPango.cpp
@@ -537,11 +537,23 @@
                                       nsRenderingContextGTK *aContext)
 {
     nsresult rv = NS_OK;
-
+    gchar *text = NULL;
     PangoLayout *layout = pango_layout_new(mPangoContext);
 
-    gchar *text = g_utf16_to_utf8(aString, aLength,
-                                  NULL, NULL, NULL);
+    // Just copy the aString to ensure the alignment,
+    // it is not used anywhere else.
+    PRUnichar* dummy = (PRUnichar *) PR_Malloc(aLength*sizeof(PRUnichar));
+    if(!dummy) {
+#ifdef DEBUG
+        NS_WARNING("nsFontMetricsPango::GetTextDimensions malloc() failed");
+#endif
+        rv = NS_ERROR_FAILURE;
+        goto out;
+    }
+    memcpy(dummy, aString, aLength*sizeof(PRUnichar));
+    text = g_utf16_to_utf8(dummy, aLength,
+                           NULL, NULL, NULL);
+    PR_Free(dummy);
 
     if (!text) {
 #ifdef DEBUG
@@ -582,6 +594,7 @@
 
  loser:
     g_free(text);
+ out:
     g_object_unref(layout);
 
     return rv;
@@ -952,7 +965,6 @@
 {
     int trailing = 0;
     int inx = 0;
-    gboolean found = FALSE;
     const gchar *curChar;
     PRInt32 retval = 0;
 
@@ -978,22 +990,12 @@
     pango_layout_set_text(layout, text, strlen(text));
     FixupSpaceWidths(layout, text);
     
-    found = pango_layout_xy_to_index(layout, localX, localY,
-                                     &inx, &trailing);
+    pango_layout_xy_to_index(layout, localX, localY,
+                             &inx, &trailing);
 
     // Convert the index back to the utf-16 index
     curChar = text;
 
-    // Jump to the end if it's not found.
-    if (!found) {
-        if (inx == 0)
-            retval = 0;
-        else if (trailing)
-            retval = aLength;
-
-        goto loser;
-    }
-
     for (PRUint32 curOffset=0; curOffset < aLength;
          curOffset++, curChar = g_utf8_find_next_char(curChar, NULL)) {
 
--- iceweasel-2.0.0.12.orig/gfx/src/gtk/nsFontMetricsXft.cpp
+++ iceweasel-2.0.0.12/gfx/src/gtk/nsFontMetricsXft.cpp
@@ -2200,19 +2200,27 @@
 nsAutoDrawSpecBuffer::Flush()
 {
     if (mSpecPos) {
-        // Some Xft libraries will crash if none of the glyphs have any
-        // area.  So before we draw, we scan through the glyphs.  If we
-        // find any that have area, we can draw.
-        for (PRUint32 i = 0; i < mSpecPos; i++) {
-            XftGlyphFontSpec *sp = &mSpecBuffer[i];
-            XGlyphInfo info;
-            XftGlyphExtents(GDK_DISPLAY(), sp->font, &sp->glyph, 1, &info);
-            if (info.width && info.height) {
-                // If we get here it means we found a drawable glyph.  We will
-                // Draw all the remaining glyphs and then break out of the loop
-                XftDrawGlyphFontSpec(mDraw, mColor, mSpecBuffer+i, mSpecPos-i);
-                break;
+        // There are two Xft problems to work around here:
+        // 1.  Some Xft libraries reportedly crash if none of the
+        //     glyphs have any area.
+        // 2.  Because of an apparent X server bug (see bug 252033),
+        //     a glyph with no area may cause all following glyphs to be
+        //     dropped under some circumstances.
+        // For this reason, we manually ship out blocks of glyphs with
+        // area and skip blocks of glyphs with no area.
+        PRUint32 start = 0;
+        while (start < mSpecPos) {
+            PRUint32 i;
+            for (i = start; i < mSpecPos; i++) {
+                XftGlyphFontSpec *sp = &mSpecBuffer[i];
+                XGlyphInfo info;
+                XftGlyphExtents(GDK_DISPLAY(), sp->font, &sp->glyph, 1, &info);
+                if (!info.width || !info.height)
+                    break;
             }
+            if (i > start)
+                XftDrawGlyphFontSpec(mDraw, mColor, mSpecBuffer+start, i-start);
+            start = i + 1;
         }
         mSpecPos = 0;
     }

