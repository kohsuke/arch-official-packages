diff -uNr linux-wlan-ng-0.2.7/CHANGES ../../wlan-ng26-ck-svn/src/trunk-build/CHANGES
--- linux-wlan-ng-0.2.7/CHANGES	2007-01-09 16:37:31.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/CHANGES	2007-02-15 23:19:04.000000000 +0000
@@ -41,6 +41,9 @@
 * Intersil Corporation as part of PRISM(R) chipset product development.
 *
 * --------------------------------------------------------------------
+ - Silence a large pile of warnings with GCC4.1
+ - pt_regs is gone for USB as well on 2.6.19+ (Chris Rankin)
+ - Large WEXT patch that allows use of NetworkManager. (Richard Kennedy)
 0.2.7
  - Fix license text in prism2dl.c (it is in fact MPL/GPL)
  - Fix oops in wext_autojoin (Richard Kennedy)
diff -uNr linux-wlan-ng-0.2.7/config.in ../../wlan-ng26-ck-svn/src/trunk-build/config.in
--- linux-wlan-ng-0.2.7/config.in	2007-01-04 14:11:35.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/config.in	2007-02-15 23:19:04.000000000 +0000
@@ -1,6 +1,6 @@
 WLAN_VERSION=0
 WLAN_PATCHLEVEL=2
-WLAN_SUBLEVEL=7
+WLAN_SUBLEVEL=8
 WLAN_EXTRAVERSION=
 #LINUX_SRC=/usr/src/linux
 PCMCIA_SRC=
@@ -15,7 +15,7 @@
 CROSS_COMPILE_ENABLED=n
 CROSS_COMPILE=
 HOST_COMPILE=
-PRISM2_PLX=n
+PRISM2_PLX=y
 PRISM2_PCMCIA=y
-PRISM2_PCI=n
-PRISM2_USB=n
+PRISM2_PCI=y
+PRISM2_USB=y
diff -uNr linux-wlan-ng-0.2.7/etc/wlan/wlan-udev.sh ../../wlan-ng26-ck-svn/src/trunk-build/etc/wlan/wlan-udev.sh
--- linux-wlan-ng-0.2.7/etc/wlan/wlan-udev.sh	2006-06-26 16:03:27.000000000 +0100
+++ ../../wlan-ng26-ck-svn/src/trunk-build/etc/wlan/wlan-udev.sh	2007-02-15 23:19:02.000000000 +0000
@@ -5,21 +5,42 @@
 #udev rule
 #ACTION=="add",BUS=="usb",DRIVER=="prism2_usb",RUN+="/etc/wlan/wlan-udev.sh %k"
 
+# 01-01-2007 (rsk) add check for wlan_wext_write
 
+WEXT_PARAM=/sys/module/p80211/parameters/wlan_wext_write
 
 DEVICE=$1
 WLAN_UDEV=1
 
 . /etc/wlan/shared
 
+if [ -f $WEXT_PARAM ]; then
+    WLAN_WEXT=`cat $WEXT_PARAM`
+    if [ $WLAN_WEXT = 1 ]; then
+	WLAN_WEXT=T
+    fi
+fi
+
+echo calling wlan_bring_it_up
 wlan_bring_it_up $DEVICE $WLAN_WEXT
+
 if [ $? = 0 ] ; then
     echo $DEVICE start OK
+    if [ "$WLAN_WEXT" != "T" ] ; then
     #allow time during boot to let other things start
-    sleep 5
-    /sbin/ifup $DEVICE
+	sleep 5
+	/sbin/ifup $DEVICE
+    else
+	# set encrypt on card not host
+	result=`$WLANCTL $DEVICE lnxreq_hostwep decrypt="false" encrypt="false"`
+	if [ $? != 0 ]; then
+	    echo "Cannot enable wep $result"
+	    exit 1
+	fi
+    fi
 else
     echo $DEVICE failed to come up! >&2
     exit 1
 fi
 
+
diff -uNr linux-wlan-ng-0.2.7/src/include/wlan/wlan_compat.h ../../wlan-ng26-ck-svn/src/trunk-build/src/include/wlan/wlan_compat.h
--- linux-wlan-ng-0.2.7/src/include/wlan/wlan_compat.h	2006-11-10 14:28:33.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/include/wlan/wlan_compat.h	2007-02-15 23:19:34.000000000 +0000
@@ -281,6 +281,10 @@
 
 #if defined(__KERNEL__)
 
+#if ((LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)) || (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,19)))
+#define URB_ONLY_CALLBACK
+#endif
+
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19))
 #define PT_REGS    , struct pt_regs *regs
 #else
@@ -490,6 +494,12 @@
         } while (0)
 #endif
 
+#ifndef container_of
+#define container_of(ptr, type, member) ({			\
+        const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
+        (type *)( (char *)__mptr - offsetof(type,member) );})
+#endif
+
 #ifndef INIT_WORK
 #define work_struct tq_struct
 
@@ -500,10 +510,18 @@
 #endif
 
 #define flush_scheduled_work  flush_scheduled_tasks
-#define INIT_WORK(_wq, _routine, _data)  INIT_TQUEUE(_wq, _routine, _data)
-#define PREPARE_WORK(_wq, _routine, _data)  PREPARE_TQUEUE(_wq, _routine, _data)
+#define INIT_WORK2(_wq, _routine)  INIT_TQUEUE(_wq, (void (*)(void *))_routine, _wq)
 #endif
-#endif // < 2.5 kernel
+
+#else // >= 2.5 kernel
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,20)
+#define INIT_WORK2(_wq, _routine)	INIT_WORK(_wq, (void (*)(void *))_routine, _wq)
+#else
+#define INIT_WORK2(_wq, _routine)	INIT_WORK(_wq, _routine)
+#endif
+
+#endif // >= 2.5 kernel
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,3,38))
 typedef struct device netdevice_t;
diff -uNr linux-wlan-ng-0.2.7/src/p80211/p80211wext.c ../../wlan-ng26-ck-svn/src/trunk-build/src/p80211/p80211wext.c
--- linux-wlan-ng-0.2.7/src/p80211/p80211wext.c	2007-01-04 14:11:06.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/p80211/p80211wext.c	2007-02-15 23:19:02.000000000 +0000
@@ -130,8 +130,23 @@
 };
 #define NUM_CHANNELS (sizeof(p80211wext_channel_freq) / sizeof(p80211wext_channel_freq[0])) 
 
+/* steal a spare bit to store the shared/opensystems state. should default to open if not set */
+#define HOSTWEP_SHAREDKEY BIT3
+
+
 /** function declarations =============== */
 
+static int qual_as_percent(int snr ) {
+  if ( snr <= 0 ) 
+    return 0;
+  if ( snr <= 40 )
+    return snr*5/2;
+  return 100;
+}
+
+
+
+
 static int p80211wext_dorequest(wlandevice_t *wlandev, UINT32 did, UINT32 data)
 {
 	p80211msg_dot11req_mibset_t	msg;
@@ -169,15 +184,10 @@
 		goto exit;
 	}
 
-#warning "make a smarter sharedkey/opensystem auth decision"
-	/* Get WEPDef */
-	if (wlandev->hostwep & HOSTWEP_PRIVACYINVOKED ||
-	    wlandev->hostwep & HOSTWEP_EXCLUDEUNENCRYPTED) {
-		msg.authtype.data = P80211ENUM_authalg_sharedkey;
-	}
-	else {
-		msg.authtype.data = P80211ENUM_authalg_opensystem;
-	}
+	if ( wlandev->hostwep & HOSTWEP_SHAREDKEY ) 
+	  msg.authtype.data = P80211ENUM_authalg_sharedkey;
+	else
+	  msg.authtype.data = P80211ENUM_authalg_opensystem;
 
 	msg.msgcode = DIDmsg_lnxreq_autojoin;		
 
@@ -213,7 +223,6 @@
 	int retval;
 	
 	DBFENTER;
-	
 	/* Check */
 	if ( (wlandev == NULL) || (wlandev->msdstate != WLAN_MSD_RUNNING) )
 		return NULL;
@@ -232,7 +241,7 @@
 
 	retval = wlandev->mlmerequest(wlandev, (p80211msg_t*) &quality);
 
-	wstats->qual.qual = quality.link.data;    /* overall link quality */
+	wstats->qual.qual = qual_as_percent(quality.link.data);    /* overall link quality */
 	wstats->qual.level = quality.level.data;  /* instant signal level */
 	wstats->qual.noise = quality.noise.data;  /* instant noise level */
 
@@ -466,6 +475,10 @@
 
 	DBFENTER;
 
+	// for backward compatability set size & zero everything we don't understand
+	data->length = sizeof(*range);
+	memset(range,0,sizeof(*range));
+
 #if WIRELESS_EXT > 9
 	range->txpower_capa = IW_TXPOW_DBM;
 	// XXX what about min/max_pmp, min/max_pmt, etc.
@@ -504,9 +517,9 @@
 	range->num_frequency = val;
 	
 	/* Max of /proc/net/wireless */
-	range->max_qual.qual = 92;
-	range->max_qual.level = 154;
-	range->max_qual.noise = 154;
+	range->max_qual.qual = 100;
+	range->max_qual.level = 0;
+	range->max_qual.noise = 0;
 	range->sensitivity = 3;
 	// XXX these need to be nsd-specific!
 
@@ -604,7 +617,6 @@
 	int i;
 
 	DBFENTER;
-
 	if (!wlan_wext_write) {
 		err = (-EOPNOTSUPP);
 		goto exit;
@@ -737,7 +749,7 @@
 		data->length++;
 #endif
 	} else {
-		memset(essid, 0, sizeof(wlandev->ssid.data));
+	  	memset(essid, 0, sizeof(wlandev->ssid.data));
 		data->length = 0;
 		data->flags = 0;
 	}
@@ -751,11 +763,11 @@
 			       struct iw_point *data, char *essid)
 {
 	wlandevice_t *wlandev = (wlandevice_t*)dev->priv;
-	p80211msg_dot11req_mibset_t     msg;
-	p80211item_pstr32_t             pstr;
+	p80211msg_lnxreq_autojoin_t     msg;
 
 	int result;
 	int err = 0;
+	int length = data->length;
 
 	DBFENTER;
 
@@ -764,40 +776,36 @@
 		goto exit;
 	}
 
-	memset(&msg, 0, sizeof(msg));
-	memset(&pstr, 0, sizeof(pstr));  
-	msg.msgcode = DIDmsg_dot11req_mibset;
 
-#warning "Get rid of p2mib here!"
-
-	if (wlandev->macmode == WLAN_MACMODE_ESS_AP)
-		pstr.did = DIDmib_p2_p2Static_p2CnfOwnSSID;
+	if ( wlandev->hostwep & HOSTWEP_SHAREDKEY ) 
+	  msg.authtype.data = P80211ENUM_authalg_sharedkey;
 	else
-		pstr.did = DIDmib_dot11smt_dot11StationConfigTable_dot11DesiredSSID;
+	  msg.authtype.data = P80211ENUM_authalg_opensystem;
+
+	msg.msgcode = DIDmsg_lnxreq_autojoin;		
 
-        if (data->flags == 0) {
-		pstr.data.len = 0;
-		memset(pstr.data.data, 0, sizeof(pstr.data.data));
-	} else {
 #if (WIRELESS_EXT < 21)
-		pstr.data.len = data->length - 1;
-#else
-		pstr.data.len = data->length;
+	if (length) length--;
 #endif
-		memcpy(pstr.data.data, essid, pstr.data.len);
+	
+	/* Trim the last '\0' to fit the SSID format */
+
+	if (length && essid[length-1] == '\0') {
+	  length--;
 	}
+	
+	memcpy(msg.ssid.data.data, essid, length);
+	msg.ssid.data.len = length;
 
-	memcpy(&msg.mibattribute.data, &pstr, sizeof(pstr));
+	WLAN_LOG_DEBUG(1,"autojoin_ssid for %s \n",essid);
 	result = p80211req_dorequest(wlandev, (UINT8*)&msg);
+        WLAN_LOG_DEBUG(1,"autojoin_ssid %d\n",result);
 
 	if (result) {
 		err = -EFAULT;
 		goto exit;
 	}
 
-	/* Auto Join */
-	err = p80211wext_autojoin(wlandev); 
-
  exit:
 	DBFEXIT;
 	return err;
@@ -1394,8 +1402,8 @@
 	msg.scantype.data = P80211ENUM_scantype_active;
 	msg.probedelay.data = 0;
 
-	for (i = 0; i < 14; i++)
-		msg.channellist.data.data[i] = i;
+	for (i = 1; i <= 14; i++)
+		msg.channellist.data.data[i-1] = i;
 	msg.channellist.data.len = 14;
 
 	msg.maxchanneltime.data = 250;
@@ -1480,7 +1488,7 @@
 	iwe.u.qual.level = bss->signal.data;
 	iwe.u.qual.noise = bss->noise.data;
 	/* do a simple SNR for quality */
-	iwe.u.qual.qual = bss->signal.data - bss->noise.data;
+	iwe.u.qual.qual = qual_as_percent(bss->signal.data - bss->noise.data);
 	iwe.cmd = IWEVQUAL;
 	current_ev = iwe_stream_add_event(current_ev, end_buf, &iwe, IW_EV_QUAL_LEN);
 
@@ -1533,6 +1541,240 @@
 }
 #endif
 
+/*****************************************************/
+//extra wireless extensions stuff to support NetworkManager (I hope)
+
+#if WIRELESS_EXT > 17
+/* SIOCSIWENCODEEXT */
+static int p80211wext_set_encodeext(struct net_device *dev,
+				struct iw_request_info *info,
+				union iwreq_data *wrqu, char *extra)
+{
+  wlandevice_t *wlandev = (wlandevice_t*)dev->priv;
+  struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
+	p80211msg_dot11req_mibset_t	msg;
+	p80211item_pstr32_t		*pstr;
+
+  int result = 0;
+  struct iw_point *encoding = &wrqu->encoding;
+  int idx = encoding->flags & IW_ENCODE_INDEX;
+
+  WLAN_LOG_DEBUG(1,"set_encode_ext flags[%d] alg[%d] keylen[%d]\n",ext->ext_flags,(int)ext->alg,(int)ext->key_len);
+
+
+  if ( ext->ext_flags & IW_ENCODE_EXT_GROUP_KEY ) {
+    // set default key ? I'm not sure if this the the correct thing to do here 
+
+    if ( idx ) {
+      if (idx < 1 || idx > NUM_WEPKEYS) {
+	return -EINVAL;
+      } else 
+	idx--;
+    }
+    WLAN_LOG_DEBUG(1,"setting default key (%d)\n",idx);
+    result = p80211wext_dorequest(wlandev, DIDmib_dot11smt_dot11PrivacyTable_dot11WEPDefaultKeyID, idx);
+    if ( result ) 
+      return -EFAULT;
+  }
+
+
+  if ( ext->ext_flags & IW_ENCODE_EXT_SET_TX_KEY ) {
+    if ( ! ext->alg & IW_ENCODE_ALG_WEP) {
+      WLAN_LOG_DEBUG(1,"asked to set a non wep key :(");
+      return -EINVAL;
+    }
+    if (idx) {
+      if (idx <1 || idx > NUM_WEPKEYS) 
+	return -EINVAL;
+      else
+	idx--;
+    }
+    WLAN_LOG_DEBUG(1,"Set WEP key (%d)\n",idx);
+    wlandev->wep_keylens[idx] = ext->key_len;
+    memcpy(wlandev->wep_keys[idx], ext->key, ext->key_len);
+
+    memset( &msg,0,sizeof(msg));
+    pstr = (p80211item_pstr32_t*)&msg.mibattribute.data;
+    memcpy(pstr->data.data, ext->key,ext->key_len);
+    pstr->data.len = ext->key_len;
+    switch (idx) {
+    case 0:
+      pstr->did = DIDmib_dot11smt_dot11WEPDefaultKeysTable_dot11WEPDefaultKey0;
+      break;
+    case 1:
+      pstr->did = DIDmib_dot11smt_dot11WEPDefaultKeysTable_dot11WEPDefaultKey1;
+      break;
+    case 2:
+      pstr->did = DIDmib_dot11smt_dot11WEPDefaultKeysTable_dot11WEPDefaultKey2;
+      break;
+    case 3:
+      pstr->did = DIDmib_dot11smt_dot11WEPDefaultKeysTable_dot11WEPDefaultKey3;
+      break;
+    default:
+      break;
+    }
+    msg.msgcode = DIDmsg_dot11req_mibset;
+    result = p80211req_dorequest(wlandev,(UINT8*)&msg);
+    WLAN_LOG_DEBUG(1,"result (%d)\n",result);
+  }
+  return result;
+}
+
+/* SIOCGIWENCODEEXT */
+static int p80211wext_get_encodeext(struct net_device *dev,
+				struct iw_request_info *info,
+				union iwreq_data *wrqu, char *extra)
+
+{
+	wlandevice_t *wlandev = (wlandevice_t*)dev->priv;
+	struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
+
+	struct iw_point *encoding = &wrqu->encoding; 
+	int result = 0;
+	int max_len;
+	int idx;
+
+	DBFENTER;
+
+	WLAN_LOG_DEBUG(1,"get_encode_ext flags[%d] alg[%d] keylen[%d]\n",ext->ext_flags,(int)ext->alg,(int)ext->key_len);
+
+
+	max_len = encoding->length - sizeof(*ext);
+	if ( max_len <= 0) {
+		WLAN_LOG_DEBUG(1,"get_encodeext max_len [%d] invalid\n",max_len);
+		result = -EINVAL;
+		goto exit;
+	}
+	idx = encoding->flags & IW_ENCODE_INDEX;
+
+	WLAN_LOG_DEBUG(1,"get_encode_ext index [%d]\n",idx);
+
+	if (idx) {
+		if (idx < 1 || idx > NUM_WEPKEYS ) {
+			WLAN_LOG_DEBUG(1,"get_encode_ext invalid key index [%d]\n",idx);
+			result = -EINVAL;
+			goto exit;
+		}
+		idx--;
+	} else {
+		/* default key ? not sure what to do */
+		/* will just use key[0] for now ! FIX ME */
+	}
+
+	encoding->flags = idx + 1;
+	memset(ext,0,sizeof(*ext));
+
+	ext->alg = IW_ENCODE_ALG_WEP;
+	ext->key_len = wlandev->wep_keylens[idx];
+	memcpy( ext->key, wlandev->wep_keys[idx] , ext->key_len );  
+	
+	encoding->flags |= IW_ENCODE_ENABLED;
+exit:
+	DBFEXIT;
+
+	return result;
+}
+
+
+/* SIOCSIWAUTH */
+static int p80211_wext_set_iwauth (struct net_device *dev,
+				   struct iw_request_info *info,
+				   union iwreq_data *wrqu, char *extra)
+{
+  wlandevice_t *wlandev = (wlandevice_t*)dev->priv;
+  struct iw_param *param = &wrqu->param;
+  int result =0;
+
+  WLAN_LOG_DEBUG(1,"set_iwauth flags[%d]\n",(int)param->flags & IW_AUTH_INDEX );
+
+  switch (param->flags & IW_AUTH_INDEX) {
+  case IW_AUTH_DROP_UNENCRYPTED:
+    WLAN_LOG_DEBUG(1,"drop_unencrypted %d\n",param->value);
+    if (param->value) 
+      result = p80211wext_dorequest(wlandev, DIDmib_dot11smt_dot11PrivacyTable_dot11ExcludeUnencrypted, P80211ENUM_truth_true);
+    else 
+      result = p80211wext_dorequest(wlandev, DIDmib_dot11smt_dot11PrivacyTable_dot11ExcludeUnencrypted, P80211ENUM_truth_false);
+    break;
+
+  case IW_AUTH_PRIVACY_INVOKED:
+    WLAN_LOG_DEBUG(1,"privacy invoked %d\n",param->value);
+    if ( param->value)
+      result = p80211wext_dorequest(wlandev, DIDmib_dot11smt_dot11PrivacyTable_dot11PrivacyInvoked, P80211ENUM_truth_true);
+    else
+      result = p80211wext_dorequest(wlandev, DIDmib_dot11smt_dot11PrivacyTable_dot11PrivacyInvoked, P80211ENUM_truth_false);
+  
+    break;
+
+  case IW_AUTH_80211_AUTH_ALG:
+    if ( param->value & IW_AUTH_ALG_OPEN_SYSTEM ) {
+      WLAN_LOG_DEBUG(1,"set open_system\n");
+      wlandev->hostwep &= ~HOSTWEP_SHAREDKEY;
+    } else if ( param->value & IW_AUTH_ALG_SHARED_KEY) {
+      WLAN_LOG_DEBUG(1,"set shared key\n");
+      wlandev->hostwep |= HOSTWEP_SHAREDKEY;
+    } else {
+      /* don't know what to do know :( */
+      WLAN_LOG_DEBUG(1,"unknown AUTH_ALG (%d)\n",param->value);
+      result = -EINVAL;
+    }
+    break;
+
+  default:
+    break;
+  }
+
+
+	
+  return result;
+}
+
+/* SIOCSIWAUTH */
+static int p80211_wext_get_iwauth (struct net_device *dev,
+				   struct iw_request_info *info,
+				   union iwreq_data *wrqu, char *extra)
+{
+  wlandevice_t *wlandev = (wlandevice_t*)dev->priv;
+  struct iw_param *param = &wrqu->param;
+  int result =0;
+
+  WLAN_LOG_DEBUG(1,"get_iwauth flags[%d]\n",(int)param->flags & IW_AUTH_INDEX );
+
+  switch (param->flags & IW_AUTH_INDEX) {
+  case IW_AUTH_DROP_UNENCRYPTED:
+    param->value = wlandev->hostwep & HOSTWEP_EXCLUDEUNENCRYPTED?1:0;
+    break;
+
+  case IW_AUTH_PRIVACY_INVOKED:
+    param->value = wlandev->hostwep & HOSTWEP_PRIVACYINVOKED?1:0;
+    break;
+
+  case IW_AUTH_80211_AUTH_ALG:
+    param->value = wlandev->hostwep & HOSTWEP_SHAREDKEY?IW_AUTH_ALG_SHARED_KEY:IW_AUTH_ALG_OPEN_SYSTEM;
+    break;
+
+
+  default:
+    break;
+  }
+
+
+	
+  return result;
+}
+
+
+#endif
+
+
+
+
+
+
+/*****************************************************/
+
+
+
+
 
 /*
 typedef int (*iw_handler)(netdevice_t *dev, struct iw_request_info *info,
@@ -1592,6 +1834,20 @@
 	(iw_handler) p80211wext_giwencode,  		/* SIOCGIWENCODE */
 	(iw_handler) NULL,                 		/* SIOCSIWPOWER */
 	(iw_handler) NULL,                  		/* SIOCGIWPOWER */
+#if WIRELESS_EXT > 17
+/* WPA operations */
+
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL, /* SIOCSIWGENIE	set generic IE */
+	(iw_handler) NULL, /* SIOCGIWGENIE	get generic IE */
+	(iw_handler) p80211_wext_set_iwauth, /* SIOCSIWAUTH	set authentication mode params */
+	(iw_handler) p80211_wext_get_iwauth, /* SIOCGIWAUTH	get authentication mode params */
+
+	(iw_handler) p80211wext_set_encodeext, /* SIOCSIWENCODEEXT  set encoding token & mode */
+	(iw_handler) p80211wext_get_encodeext, /* SIOCGIWENCODEEXT  get encoding token & mode */
+	(iw_handler) NULL, /* SIOCSIWPMKSA	PMKSA cache operation */
+#endif
 };
 
 struct iw_handler_def p80211wext_handler_def = {
diff -uNr linux-wlan-ng-0.2.7/src/prism2/driver/hfa384x.c ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/hfa384x.c
--- linux-wlan-ng-0.2.7/src/prism2/driver/hfa384x.c	2006-11-10 14:28:33.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/hfa384x.c	2007-02-15 23:19:34.000000000 +0000
@@ -352,9 +352,9 @@
 	/* Init the auth queue head */
 	skb_queue_head_init(&hw->authq);
 
-	INIT_WORK(&hw->link_bh, prism2sta_processing_defer, hw);
+	INIT_WORK2(&hw->link_bh, prism2sta_processing_defer);
 
-        INIT_WORK(&hw->commsqual_bh, prism2sta_commsqual_defer, hw);
+        INIT_WORK2(&hw->commsqual_bh, prism2sta_commsqual_defer);
 
 	init_timer(&hw->commsqual_timer);
 	hw->commsqual_timer.data = (unsigned long) hw;
diff -uNr linux-wlan-ng-0.2.7/src/prism2/driver/hfa384x_usb.c ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/hfa384x_usb.c
--- linux-wlan-ng-0.2.7/src/prism2/driver/hfa384x_usb.c	2006-11-02 15:56:40.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/hfa384x_usb.c	2007-02-15 23:19:34.000000000 +0000
@@ -247,7 +247,7 @@
 	hfa384x_usb_rxfrm_t *rxfrm);
 
 static void
-hfa384x_usb_defer(void *hw);
+hfa384x_usb_defer(struct work_struct *data);
 
 static int
 submit_rx_urb(hfa384x_t *hw, int flags);
@@ -257,7 +257,7 @@
 
 /*---------------------------------------------------*/
 /* Callbacks */
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0))
+#ifdef URB_ONLY_CALLBACK
 static void 
 hfa384x_usbout_callback(struct urb *urb);
 static void
@@ -579,9 +579,9 @@
 *	process (by design)
 ----------------------------------------------------------------*/
 static void
-hfa384x_usb_defer(void *data)
+hfa384x_usb_defer(struct work_struct *data)
 {
-	hfa384x_t *hw = data;
+	hfa384x_t *hw = container_of(data, struct hfa384x, usb_work);
 	struct net_device *netdev = hw->wlandev->netdev;
 
 	DBFENTER;
@@ -711,8 +711,8 @@
 	tasklet_init(&hw->completion_bh,
 	             hfa384x_usbctlx_completion_task,
 	             (unsigned long)hw);
-	INIT_WORK(&hw->link_bh, prism2sta_processing_defer, hw);
-	INIT_WORK(&hw->usb_work, hfa384x_usb_defer, hw);
+	INIT_WORK2(&hw->link_bh, prism2sta_processing_defer);
+	INIT_WORK2(&hw->usb_work, hfa384x_usb_defer);
 
 	init_timer(&hw->throttle);
 	hw->throttle.function = hfa384x_usb_throttlefn;
@@ -733,7 +733,7 @@
 	hw->link_status = HFA384x_LINK_NOTCONNECTED;
 	hw->state = HFA384x_STATE_INIT;
 
-        INIT_WORK(&hw->commsqual_bh, prism2sta_commsqual_defer, hw);
+        INIT_WORK2(&hw->commsqual_bh, prism2sta_commsqual_defer);
 	init_timer(&hw->commsqual_timer);
 	hw->commsqual_timer.data = (unsigned long) hw;
 	hw->commsqual_timer.function = prism2sta_commsqual_timer;
@@ -3847,7 +3847,7 @@
 * Call context:
 *	interrupt
 ----------------------------------------------------------------*/
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0))
+#ifdef URB_ONLY_CALLBACK
 void hfa384x_usbin_callback(struct urb *urb)
 #else
 void hfa384x_usbin_callback(struct urb *urb, struct pt_regs *regs)
@@ -4506,7 +4506,7 @@
 * Call context:
 *	interrupt
 ----------------------------------------------------------------*/
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0))
+#ifdef URB_ONLY_CALLBACK
 void hfa384x_usbout_callback(struct urb *urb)
 #else
 void hfa384x_usbout_callback(struct urb *urb, struct pt_regs *regs)
@@ -4587,7 +4587,7 @@
 * Call context:
 * interrupt
 ----------------------------------------------------------------*/
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0))
+#ifdef URB_ONLY_CALLBACK
 void hfa384x_ctlxout_callback(struct urb *urb)
 #else
 void hfa384x_ctlxout_callback(struct urb *urb, struct pt_regs *regs)
diff -uNr linux-wlan-ng-0.2.7/src/prism2/driver/prism2mgmt.c ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/prism2mgmt.c
--- linux-wlan-ng-0.2.7/src/prism2/driver/prism2mgmt.c	2006-11-02 15:56:40.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/prism2mgmt.c	2007-02-15 23:19:03.000000000 +0000
@@ -2034,7 +2034,7 @@
 {
 	hfa384x_t		*hw = wlandev->priv;
 	p80211msg_p2req_mmi_read_t	*msg = msgp;
-	UINT32 resp;
+	UINT32 resp = 0;
 
 	DBFENTER;
 
diff -uNr linux-wlan-ng-0.2.7/src/prism2/driver/prism2sta.c ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/prism2sta.c
--- linux-wlan-ng-0.2.7/src/prism2/driver/prism2sta.c	2006-11-02 15:56:40.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/driver/prism2sta.c	2007-02-15 23:19:34.000000000 +0000
@@ -1438,9 +1438,9 @@
 	return;
 }
 
-void prism2sta_processing_defer(void *data)
+void prism2sta_processing_defer(struct work_struct *data)
 {
-	hfa384x_t		*hw = (hfa384x_t *) data;
+	hfa384x_t		*hw = container_of(data, struct hfa384x, link_bh);
 	wlandevice_t            *wlandev = hw->wlandev;
 	hfa384x_bytestr32_t ssid;
 	int			result;
@@ -1540,7 +1540,7 @@
 				WLAN_MACMODE_IBSS_STA : WLAN_MACMODE_ESS_STA;
 
 			/* Get the ball rolling on the comms quality stuff */
-			prism2sta_commsqual_defer(hw);
+			prism2sta_commsqual_defer(&hw->commsqual_bh);
 		}
 		break;
 
@@ -2413,9 +2413,9 @@
 }
 #endif
 
-void prism2sta_commsqual_defer(void *data)
+void prism2sta_commsqual_defer(struct work_struct *data)
 {
-        hfa384x_t               *hw = (hfa384x_t *) data;
+	hfa384x_t		*hw = container_of(data, struct hfa384x, commsqual_bh);
         wlandevice_t            *wlandev = hw->wlandev;
 	hfa384x_bytestr32_t ssid;
 	int result = 0;
diff -uNr linux-wlan-ng-0.2.7/src/prism2/include/prism2/hfa384x.h ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/include/prism2/hfa384x.h
--- linux-wlan-ng-0.2.7/src/prism2/include/prism2/hfa384x.h	2007-01-11 17:16:35.000000000 +0000
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/include/prism2/hfa384x.h	2007-02-15 23:19:03.000000000 +0000
@@ -927,14 +927,14 @@
 /* Commonly used basic types */
 typedef struct hfa384x_bytestr
 {
-	UINT16	len			__WLAN_ATTRIB_PACK__;
-	UINT8	data[0]			__WLAN_ATTRIB_PACK__;
+	UINT16	len;
+	UINT8	data[0];
 } __WLAN_ATTRIB_PACK__ hfa384x_bytestr_t;
 
 typedef struct hfa384x_bytestr32
 {
-	UINT16	len			__WLAN_ATTRIB_PACK__;
-	UINT8	data[32]		__WLAN_ATTRIB_PACK__;
+	UINT16	len;
+	UINT8	data[32];
 } __WLAN_ATTRIB_PACK__ hfa384x_bytestr32_t;
 
 /*--------------------------------------------------------------------
@@ -946,112 +946,112 @@
 
 typedef struct hfa384x_record 
 {
-	UINT16	reclen			__WLAN_ATTRIB_PACK__;
-	UINT16	rid			__WLAN_ATTRIB_PACK__;
+	UINT16	reclen;
+	UINT16	rid;
 } __WLAN_ATTRIB_PACK__ hfa384x_rec_t;
 
 typedef struct hfa384x_record16
 {
-	UINT16	reclen			__WLAN_ATTRIB_PACK__;
-	UINT16	rid			__WLAN_ATTRIB_PACK__;
-	UINT16	val			__WLAN_ATTRIB_PACK__;
+	UINT16	reclen;
+	UINT16	rid;
+	UINT16	val;
 } __WLAN_ATTRIB_PACK__ hfa384x_rec16_t;
 
 typedef struct hfa384x_record32
 {
-	UINT16	reclen			__WLAN_ATTRIB_PACK__;
-	UINT16	rid			__WLAN_ATTRIB_PACK__;
-	UINT32	val			__WLAN_ATTRIB_PACK__;
+	UINT16	reclen;
+	UINT16	rid;
+	UINT32	val;
 } __WLAN_ATTRIB_PACK__ hfa384x_rec32;
 
 /*-- Hardware/Firmware Component Information ----------*/
 typedef struct hfa384x_compident
 {
-	UINT16	id			__WLAN_ATTRIB_PACK__;
-	UINT16	variant			__WLAN_ATTRIB_PACK__;
-	UINT16	major			__WLAN_ATTRIB_PACK__;
-	UINT16	minor			__WLAN_ATTRIB_PACK__;
+	UINT16	id;
+	UINT16	variant;
+	UINT16	major;
+	UINT16	minor;
 } __WLAN_ATTRIB_PACK__ hfa384x_compident_t;
 
 typedef struct hfa384x_caplevel
 {
-	UINT16	role			__WLAN_ATTRIB_PACK__;
-	UINT16	id			__WLAN_ATTRIB_PACK__;
-	UINT16	variant			__WLAN_ATTRIB_PACK__;
-	UINT16	bottom			__WLAN_ATTRIB_PACK__;
-	UINT16	top			__WLAN_ATTRIB_PACK__;
+	UINT16	role;
+	UINT16	id;
+	UINT16	variant;
+	UINT16	bottom;
+	UINT16	top;
 } __WLAN_ATTRIB_PACK__ hfa384x_caplevel_t;
 
 /*-- Configuration Record: cnfPortType --*/
 typedef struct hfa384x_cnfPortType
 {
-	UINT16	cnfPortType		__WLAN_ATTRIB_PACK__;
+	UINT16	cnfPortType;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfPortType_t;
 
 /*-- Configuration Record: cnfOwnMACAddress --*/
 typedef struct hfa384x_cnfOwnMACAddress
 {
-	UINT8	cnfOwnMACAddress[6]	__WLAN_ATTRIB_PACK__;
+	UINT8	cnfOwnMACAddress[6];
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfOwnMACAddress_t;
 
 /*-- Configuration Record: cnfDesiredSSID --*/
 typedef struct hfa384x_cnfDesiredSSID
 {
-	UINT8	cnfDesiredSSID[34]	__WLAN_ATTRIB_PACK__;
+	UINT8	cnfDesiredSSID[34];
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfDesiredSSID_t;
 
 /*-- Configuration Record: cnfOwnChannel --*/
 typedef struct hfa384x_cnfOwnChannel
 {
-	UINT16	cnfOwnChannel		__WLAN_ATTRIB_PACK__;
+	UINT16	cnfOwnChannel;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfOwnChannel_t;
 
 /*-- Configuration Record: cnfOwnSSID --*/
 typedef struct hfa384x_cnfOwnSSID
 {
-	UINT8	cnfOwnSSID[34]		__WLAN_ATTRIB_PACK__;
+	UINT8	cnfOwnSSID[34];
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfOwnSSID_t;
 
 /*-- Configuration Record: cnfOwnATIMWindow --*/
 typedef struct hfa384x_cnfOwnATIMWindow
 {
-	UINT16	cnfOwnATIMWindow	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfOwnATIMWindow;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfOwnATIMWindow_t;
 
 /*-- Configuration Record: cnfSystemScale --*/
 typedef struct hfa384x_cnfSystemScale
 {
-	UINT16	cnfSystemScale		__WLAN_ATTRIB_PACK__;
+	UINT16	cnfSystemScale;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfSystemScale_t;
 
 /*-- Configuration Record: cnfMaxDataLength --*/
 typedef struct hfa384x_cnfMaxDataLength
 {
-	UINT16	cnfMaxDataLength	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfMaxDataLength;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfMaxDataLength_t;
 
 /*-- Configuration Record: cnfWDSAddress --*/
 typedef struct hfa384x_cnfWDSAddress
 {
-	UINT8	cnfWDSAddress[6]	__WLAN_ATTRIB_PACK__;
+	UINT8	cnfWDSAddress[6];
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfWDSAddress_t;
 
 /*-- Configuration Record: cnfPMEnabled --*/
 typedef struct hfa384x_cnfPMEnabled
 {
-	UINT16	cnfPMEnabled		__WLAN_ATTRIB_PACK__;
+	UINT16	cnfPMEnabled;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfPMEnabled_t;
 
 /*-- Configuration Record: cnfPMEPS --*/
 typedef struct hfa384x_cnfPMEPS
 {
-	UINT16	cnfPMEPS		__WLAN_ATTRIB_PACK__;
+	UINT16	cnfPMEPS;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfPMEPS_t;
 
 /*-- Configuration Record: cnfMulticastReceive --*/
 typedef struct hfa384x_cnfMulticastReceive
 {
-	UINT16	cnfMulticastReceive	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfMulticastReceive;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfMulticastReceive_t;
 
 /*-- Configuration Record: cnfAuthentication --*/
@@ -1062,37 +1062,37 @@
 /*-- Configuration Record: cnfMaxSleepDuration --*/
 typedef struct hfa384x_cnfMaxSleepDuration
 {
-	UINT16	cnfMaxSleepDuration	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfMaxSleepDuration;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfMaxSleepDuration_t;
 
 /*-- Configuration Record: cnfPMHoldoverDuration --*/
 typedef struct hfa384x_cnfPMHoldoverDuration
 {
-	UINT16	cnfPMHoldoverDuration	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfPMHoldoverDuration;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfPMHoldoverDuration_t;
 
 /*-- Configuration Record: cnfOwnName --*/
 typedef struct hfa384x_cnfOwnName
 {
-	UINT8	cnfOwnName[34]		__WLAN_ATTRIB_PACK__;
+	UINT8	cnfOwnName[34];
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfOwnName_t;
 
 /*-- Configuration Record: cnfOwnDTIMPeriod --*/
 typedef struct hfa384x_cnfOwnDTIMPeriod
 {
-	UINT16	cnfOwnDTIMPeriod	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfOwnDTIMPeriod;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfOwnDTIMPeriod_t;
 
 /*-- Configuration Record: cnfWDSAddress --*/
 typedef struct hfa384x_cnfWDSAddressN
 {
-	UINT8	cnfWDSAddress[6]	__WLAN_ATTRIB_PACK__;
+	UINT8	cnfWDSAddress[6];
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfWDSAddressN_t;
 
 /*-- Configuration Record: cnfMulticastPMBuffering --*/
 typedef struct hfa384x_cnfMulticastPMBuffering
 {
-	UINT16	cnfMulticastPMBuffering	__WLAN_ATTRIB_PACK__;
+	UINT16	cnfMulticastPMBuffering;
 } __WLAN_ATTRIB_PACK__ hfa384x_cnfMulticastPMBuffering_t;
 
 /*--------------------------------------------------------------------
@@ -1103,13 +1103,13 @@
 /*-- Configuration Record: GroupAddresses --*/
 typedef struct hfa384x_GroupAddresses
 {
-	UINT8	MACAddress[16][6]	__WLAN_ATTRIB_PACK__;
+	UINT8	MACAddress[16][6];
 } __WLAN_ATTRIB_PACK__ hfa384x_GroupAddresses_t;
 
 /*-- Configuration Record: CreateIBSS --*/
 typedef struct hfa384x_CreateIBSS
 {
-	UINT16	CreateIBSS		__WLAN_ATTRIB_PACK__;
+	UINT16	CreateIBSS;
 } __WLAN_ATTRIB_PACK__ hfa384x_CreateIBSS_t;
 
 #define HFA384x_CREATEIBSS_JOINCREATEIBSS          0
@@ -1120,87 +1120,87 @@
 /*-- Configuration Record: FragmentationThreshold --*/
 typedef struct hfa384x_FragmentationThreshold
 {
-	UINT16	FragmentationThreshold	__WLAN_ATTRIB_PACK__;
+	UINT16	FragmentationThreshold;
 } __WLAN_ATTRIB_PACK__ hfa384x_FragmentationThreshold_t;
 
 /*-- Configuration Record: RTSThreshold --*/
 typedef struct hfa384x_RTSThreshold
 {
-	UINT16	RTSThreshold		__WLAN_ATTRIB_PACK__;
+	UINT16	RTSThreshold;
 } __WLAN_ATTRIB_PACK__ hfa384x_RTSThreshold_t;
 
 /*-- Configuration Record: TxRateControl --*/
 typedef struct hfa384x_TxRateControl
 {
-	UINT16	TxRateControl		__WLAN_ATTRIB_PACK__;
+	UINT16	TxRateControl;
 } __WLAN_ATTRIB_PACK__ hfa384x_TxRateControl_t;
 
 /*-- Configuration Record: PromiscuousMode --*/
 typedef struct hfa384x_PromiscuousMode
 {
-	UINT16	PromiscuousMode		__WLAN_ATTRIB_PACK__;
+	UINT16	PromiscuousMode;
 } __WLAN_ATTRIB_PACK__ hfa384x_PromiscuousMode_t;
 
 /*-- Configuration Record: ScanRequest (data portion only) --*/
 typedef struct hfa384x_ScanRequest_data
 {
-	UINT16	channelList		__WLAN_ATTRIB_PACK__;
-	UINT16	txRate			__WLAN_ATTRIB_PACK__;
+	UINT16	channelList;
+	UINT16	txRate;
 } __WLAN_ATTRIB_PACK__ hfa384x_ScanRequest_data_t;
 
 /*-- Configuration Record: HostScanRequest (data portion only) --*/
 typedef struct hfa384x_HostScanRequest_data
 {
-	UINT16	channelList		__WLAN_ATTRIB_PACK__;
-	UINT16	txRate			__WLAN_ATTRIB_PACK__;
-	hfa384x_bytestr32_t ssid        __WLAN_ATTRIB_PACK__;
+	UINT16	channelList;
+	UINT16	txRate;
+	hfa384x_bytestr32_t ssid;
 } __WLAN_ATTRIB_PACK__ hfa384x_HostScanRequest_data_t;
 
 /*-- Configuration Record: JoinRequest (data portion only) --*/
 typedef struct hfa384x_JoinRequest_data
 {
-	UINT8	bssid[WLAN_BSSID_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	channel			__WLAN_ATTRIB_PACK__;
+	UINT8	bssid[WLAN_BSSID_LEN];
+	UINT16	channel;
 } __WLAN_ATTRIB_PACK__ hfa384x_JoinRequest_data_t;
 
 /*-- Configuration Record: authenticateStation (data portion only) --*/
 typedef struct hfa384x_authenticateStation_data
 {
-	UINT8	address[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	status			__WLAN_ATTRIB_PACK__;
-	UINT16	algorithm		__WLAN_ATTRIB_PACK__;
+	UINT8	address[WLAN_ADDR_LEN];
+	UINT16	status;
+	UINT16	algorithm;
 } __WLAN_ATTRIB_PACK__ hfa384x_authenticateStation_data_t;
 
 /*-- Configuration Record: associateStation (data portion only) --*/
 typedef struct hfa384x_associateStation_data
 {
-	UINT8	address[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	status			__WLAN_ATTRIB_PACK__;
-	UINT16	type 		        __WLAN_ATTRIB_PACK__;
+	UINT8	address[WLAN_ADDR_LEN];
+	UINT16	status;
+	UINT16	type;
 } __WLAN_ATTRIB_PACK__ hfa384x_associateStation_data_t;
 
 /*-- Configuration Record: ChannelInfoRequest (data portion only) --*/
 typedef struct hfa384x_ChannelInfoRequest_data
 {
-	UINT16	channelList		__WLAN_ATTRIB_PACK__;
-	UINT16	channelDwellTime	__WLAN_ATTRIB_PACK__;
+	UINT16	channelList;
+	UINT16	channelDwellTime;
 } __WLAN_ATTRIB_PACK__ hfa384x_ChannelInfoRequest_data_t;
 
 /*-- Configuration Record: WEPKeyMapping (data portion only) --*/
 typedef struct hfa384x_WEPKeyMapping
 {
-	UINT8	address[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	key_index             	__WLAN_ATTRIB_PACK__;
-	UINT8 	key[16]               	__WLAN_ATTRIB_PACK__;
-	UINT8 	mic_transmit_key[4]   	__WLAN_ATTRIB_PACK__;
-	UINT8 	mic_receive_key[4]    	__WLAN_ATTRIB_PACK__;
+	UINT8	address[WLAN_ADDR_LEN];
+	UINT16	key_index;
+	UINT8 	key[16];
+	UINT8 	mic_transmit_key[4];
+	UINT8 	mic_receive_key[4];
 } __WLAN_ATTRIB_PACK__ hfa384x_WEPKeyMapping_t;
 
 /*-- Configuration Record: WPAData       (data portion only) --*/
 typedef struct hfa384x_WPAData
 {
-	UINT16	datalen               	__WLAN_ATTRIB_PACK__;
-        UINT8 	data[0]              	__WLAN_ATTRIB_PACK__; // max 80
+	UINT16	datalen;
+        UINT8 	data[0]; // max 80
 } __WLAN_ATTRIB_PACK__ hfa384x_WPAData_t;
 
 /*--------------------------------------------------------------------
@@ -1210,7 +1210,7 @@
 /*-- Configuration Record: TickTime --*/
 typedef struct hfa384x_TickTime
 {
-	UINT16	TickTime		__WLAN_ATTRIB_PACK__;
+	UINT16	TickTime;
 } __WLAN_ATTRIB_PACK__ hfa384x_TickTime_t;
 
 /*--------------------------------------------------------------------
@@ -1220,146 +1220,146 @@
 /*-- Information Record: MaxLoadTime --*/
 typedef struct hfa384x_MaxLoadTime
 {
-	UINT16	MaxLoadTime		__WLAN_ATTRIB_PACK__;
+	UINT16	MaxLoadTime;
 } __WLAN_ATTRIB_PACK__ hfa384x_MaxLoadTime_t;
 
 /*-- Information Record: DownLoadBuffer --*/
 /* NOTE: The page and offset are in AUX format */
 typedef struct hfa384x_downloadbuffer
 {
-	UINT16	page			__WLAN_ATTRIB_PACK__;
-	UINT16	offset			__WLAN_ATTRIB_PACK__;
-	UINT16	len			__WLAN_ATTRIB_PACK__;
+	UINT16	page;
+	UINT16	offset;
+	UINT16	len;
 } __WLAN_ATTRIB_PACK__ hfa384x_downloadbuffer_t;
 
 /*-- Information Record: PRIIdentity --*/
 typedef struct hfa384x_PRIIdentity
 {
-	UINT16	PRICompID		__WLAN_ATTRIB_PACK__;
-	UINT16	PRIVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	PRIMajorVersion		__WLAN_ATTRIB_PACK__;
-	UINT16	PRIMinorVersion		__WLAN_ATTRIB_PACK__;
+	UINT16	PRICompID;
+	UINT16	PRIVariant;
+	UINT16	PRIMajorVersion;
+	UINT16	PRIMinorVersion;
 } __WLAN_ATTRIB_PACK__ hfa384x_PRIIdentity_t;
 
 /*-- Information Record: PRISupRange --*/
 typedef struct hfa384x_PRISupRange
 {
-	UINT16	PRIRole			__WLAN_ATTRIB_PACK__;
-	UINT16	PRIID			__WLAN_ATTRIB_PACK__;
-	UINT16	PRIVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	PRIBottom		__WLAN_ATTRIB_PACK__;
-	UINT16	PRITop			__WLAN_ATTRIB_PACK__;
+	UINT16	PRIRole;
+	UINT16	PRIID;
+	UINT16	PRIVariant;
+	UINT16	PRIBottom;
+	UINT16	PRITop;
 } __WLAN_ATTRIB_PACK__ hfa384x_PRISupRange_t;
 
 /*-- Information Record: CFIActRanges --*/
 typedef struct hfa384x_CFIActRanges
 {
-	UINT16	CFIRole			__WLAN_ATTRIB_PACK__;
-	UINT16	CFIID			__WLAN_ATTRIB_PACK__;
-	UINT16	CFIVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	CFIBottom		__WLAN_ATTRIB_PACK__;
-	UINT16	CFITop			__WLAN_ATTRIB_PACK__;
+	UINT16	CFIRole;
+	UINT16	CFIID;
+	UINT16	CFIVariant;
+	UINT16	CFIBottom;
+	UINT16	CFITop;
 } __WLAN_ATTRIB_PACK__ hfa384x_CFIActRanges_t;
 
 /*-- Information Record: NICSerialNumber --*/
 typedef struct hfa384x_NICSerialNumber
 {
-	UINT8	NICSerialNumber[12]	__WLAN_ATTRIB_PACK__;
+	UINT8	NICSerialNumber[12];
 } __WLAN_ATTRIB_PACK__ hfa384x_NICSerialNumber_t;
 
 /*-- Information Record: NICIdentity --*/
 typedef struct hfa384x_NICIdentity
 {
-	UINT16	NICCompID		__WLAN_ATTRIB_PACK__;
-	UINT16	NICVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	NICMajorVersion		__WLAN_ATTRIB_PACK__;
-	UINT16	NICMinorVersion		__WLAN_ATTRIB_PACK__;
+	UINT16	NICCompID;
+	UINT16	NICVariant;
+	UINT16	NICMajorVersion;
+	UINT16	NICMinorVersion;
 } __WLAN_ATTRIB_PACK__ hfa384x_NICIdentity_t;
 
 /*-- Information Record: MFISupRange --*/
 typedef struct hfa384x_MFISupRange
 {
-	UINT16	MFIRole			__WLAN_ATTRIB_PACK__;
-	UINT16	MFIID			__WLAN_ATTRIB_PACK__;
-	UINT16	MFIVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	MFIBottom		__WLAN_ATTRIB_PACK__;
-	UINT16	MFITop			__WLAN_ATTRIB_PACK__;
+	UINT16	MFIRole;
+	UINT16	MFIID;
+	UINT16	MFIVariant;
+	UINT16	MFIBottom;
+	UINT16	MFITop;
 } __WLAN_ATTRIB_PACK__ hfa384x_MFISupRange_t;
 
 /*-- Information Record: CFISupRange --*/
 typedef struct hfa384x_CFISupRange
 {
-	UINT16	CFIRole			__WLAN_ATTRIB_PACK__;
-	UINT16	CFIID			__WLAN_ATTRIB_PACK__;
-	UINT16	CFIVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	CFIBottom		__WLAN_ATTRIB_PACK__;
-	UINT16	CFITop			__WLAN_ATTRIB_PACK__;
+	UINT16	CFIRole;
+	UINT16	CFIID;
+	UINT16	CFIVariant;
+	UINT16	CFIBottom;
+	UINT16	CFITop;
 } __WLAN_ATTRIB_PACK__ hfa384x_CFISupRange_t;
 
 /*-- Information Record: BUILDSEQ:BuildSeq --*/
 typedef struct hfa384x_BuildSeq {
-	UINT16	primary			__WLAN_ATTRIB_PACK__;
-	UINT16	secondary		__WLAN_ATTRIB_PACK__;
+	UINT16	primary;
+	UINT16	secondary;
 } __WLAN_ATTRIB_PACK__ hfa384x_BuildSeq_t;
 
 /*-- Information Record: FWID --*/
 #define HFA384x_FWID_LEN	14
 typedef struct hfa384x_FWID {
-	UINT8	primary[HFA384x_FWID_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT8	secondary[HFA384x_FWID_LEN]	__WLAN_ATTRIB_PACK__;
+	UINT8	primary[HFA384x_FWID_LEN];
+	UINT8	secondary[HFA384x_FWID_LEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_FWID_t;
 
 /*-- Information Record: ChannelList --*/
 typedef struct hfa384x_ChannelList
 {
-	UINT16	ChannelList		__WLAN_ATTRIB_PACK__;
+	UINT16	ChannelList;
 } __WLAN_ATTRIB_PACK__ hfa384x_ChannelList_t;
 
 /*-- Information Record: RegulatoryDomains --*/
 typedef struct hfa384x_RegulatoryDomains
 {
-	UINT8	RegulatoryDomains[12]	__WLAN_ATTRIB_PACK__;
+	UINT8	RegulatoryDomains[12];
 } __WLAN_ATTRIB_PACK__ hfa384x_RegulatoryDomains_t;
 
 /*-- Information Record: TempType --*/
 typedef struct hfa384x_TempType
 {
-	UINT16	TempType		__WLAN_ATTRIB_PACK__;
+	UINT16	TempType;
 } __WLAN_ATTRIB_PACK__ hfa384x_TempType_t;
 
 /*-- Information Record: CIS --*/
 typedef struct hfa384x_CIS
 {
-	UINT8	CIS[480]		__WLAN_ATTRIB_PACK__;
+	UINT8	CIS[480];
 } __WLAN_ATTRIB_PACK__ hfa384x_CIS_t;
 
 /*-- Information Record: STAIdentity --*/
 typedef struct hfa384x_STAIdentity
 {
-	UINT16	STACompID		__WLAN_ATTRIB_PACK__;
-	UINT16	STAVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	STAMajorVersion		__WLAN_ATTRIB_PACK__;
-	UINT16	STAMinorVersion		__WLAN_ATTRIB_PACK__;
+	UINT16	STACompID;
+	UINT16	STAVariant;
+	UINT16	STAMajorVersion;
+	UINT16	STAMinorVersion;
 } __WLAN_ATTRIB_PACK__ hfa384x_STAIdentity_t;
 
 /*-- Information Record: STASupRange --*/
 typedef struct hfa384x_STASupRange
 {
-	UINT16	STARole			__WLAN_ATTRIB_PACK__;
-	UINT16	STAID			__WLAN_ATTRIB_PACK__;
-	UINT16	STAVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	STABottom		__WLAN_ATTRIB_PACK__;
-	UINT16	STATop			__WLAN_ATTRIB_PACK__;
+	UINT16	STARole;
+	UINT16	STAID;
+	UINT16	STAVariant;
+	UINT16	STABottom;
+	UINT16	STATop;
 } __WLAN_ATTRIB_PACK__ hfa384x_STASupRange_t;
 
 /*-- Information Record: MFIActRanges --*/
 typedef struct hfa384x_MFIActRanges
 {
-	UINT16	MFIRole			__WLAN_ATTRIB_PACK__;
-	UINT16	MFIID			__WLAN_ATTRIB_PACK__;
-	UINT16	MFIVariant		__WLAN_ATTRIB_PACK__;
-	UINT16	MFIBottom		__WLAN_ATTRIB_PACK__;
-	UINT16	MFITop			__WLAN_ATTRIB_PACK__;
+	UINT16	MFIRole;
+	UINT16	MFIID;
+	UINT16	MFIVariant;
+	UINT16	MFIBottom;
+	UINT16	MFITop;
 } __WLAN_ATTRIB_PACK__ hfa384x_MFIActRanges_t;
 
 /*--------------------------------------------------------------------
@@ -1369,7 +1369,7 @@
 /*-- Information Record: PortStatus --*/
 typedef struct hfa384x_PortStatus
 {
-	UINT16	PortStatus		__WLAN_ATTRIB_PACK__;
+	UINT16	PortStatus;
 } __WLAN_ATTRIB_PACK__ hfa384x_PortStatus_t;
 
 #define HFA384x_PSTATUS_DISABLED	((UINT16)1)
@@ -1382,132 +1382,132 @@
 /*-- Information Record: CurrentSSID --*/
 typedef struct hfa384x_CurrentSSID
 {
-	UINT8	CurrentSSID[34]		__WLAN_ATTRIB_PACK__;
+	UINT8	CurrentSSID[34];
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentSSID_t;
 
 /*-- Information Record: CurrentBSSID --*/
 typedef struct hfa384x_CurrentBSSID
 {
-	UINT8	CurrentBSSID[6]		__WLAN_ATTRIB_PACK__;
+	UINT8	CurrentBSSID[6];
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentBSSID_t;
 
 /*-- Information Record: commsquality --*/
 typedef struct hfa384x_commsquality
 {
-	UINT16	CQ_currBSS		__WLAN_ATTRIB_PACK__;
-	UINT16	ASL_currBSS		__WLAN_ATTRIB_PACK__;
-	UINT16	ANL_currFC		__WLAN_ATTRIB_PACK__;
+	UINT16	CQ_currBSS;
+	UINT16	ASL_currBSS;
+	UINT16	ANL_currFC;
 } __WLAN_ATTRIB_PACK__ hfa384x_commsquality_t;
 
 /*-- Information Record: dmbcommsquality --*/
 typedef struct hfa384x_dbmcommsquality
 {
-	UINT16	CQdbm_currBSS		__WLAN_ATTRIB_PACK__;
-	UINT16	ASLdbm_currBSS		__WLAN_ATTRIB_PACK__;
-	UINT16	ANLdbm_currFC		__WLAN_ATTRIB_PACK__;
+	UINT16	CQdbm_currBSS;
+	UINT16	ASLdbm_currBSS;
+	UINT16	ANLdbm_currFC;
 } __WLAN_ATTRIB_PACK__ hfa384x_dbmcommsquality_t;
 
 /*-- Information Record: CurrentTxRate --*/
 typedef struct hfa384x_CurrentTxRate
 {
-	UINT16	CurrentTxRate		__WLAN_ATTRIB_PACK__;
+	UINT16	CurrentTxRate;
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentTxRate_t;
 
 /*-- Information Record: CurrentBeaconInterval --*/
 typedef struct hfa384x_CurrentBeaconInterval
 {
-	UINT16	CurrentBeaconInterval	__WLAN_ATTRIB_PACK__;
+	UINT16	CurrentBeaconInterval;
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentBeaconInterval_t;
 
 /*-- Information Record: CurrentScaleThresholds --*/
 typedef struct hfa384x_CurrentScaleThresholds
 {
-	UINT16	EnergyDetectThreshold	__WLAN_ATTRIB_PACK__;
-	UINT16	CarrierDetectThreshold	__WLAN_ATTRIB_PACK__;
-	UINT16	DeferDetectThreshold	__WLAN_ATTRIB_PACK__;
-	UINT16	CellSearchThreshold	__WLAN_ATTRIB_PACK__; /* Stations only */
-	UINT16	DeadSpotThreshold	__WLAN_ATTRIB_PACK__; /* Stations only */
+	UINT16	EnergyDetectThreshold;
+	UINT16	CarrierDetectThreshold;
+	UINT16	DeferDetectThreshold;
+	UINT16	CellSearchThreshold; /* Stations only */
+	UINT16	DeadSpotThreshold; /* Stations only */
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentScaleThresholds_t;
 
 /*-- Information Record: ProtocolRspTime --*/
 typedef struct hfa384x_ProtocolRspTime
 {
-	UINT16	ProtocolRspTime		__WLAN_ATTRIB_PACK__;
+	UINT16	ProtocolRspTime;
 } __WLAN_ATTRIB_PACK__ hfa384x_ProtocolRspTime_t;
 
 /*-- Information Record: ShortRetryLimit --*/
 typedef struct hfa384x_ShortRetryLimit
 {
-	UINT16	ShortRetryLimit		__WLAN_ATTRIB_PACK__;
+	UINT16	ShortRetryLimit;
 } __WLAN_ATTRIB_PACK__ hfa384x_ShortRetryLimit_t;
 
 /*-- Information Record: LongRetryLimit --*/
 typedef struct hfa384x_LongRetryLimit
 {
-	UINT16	LongRetryLimit		__WLAN_ATTRIB_PACK__;
+	UINT16	LongRetryLimit;
 } __WLAN_ATTRIB_PACK__ hfa384x_LongRetryLimit_t;
 
 /*-- Information Record: MaxTransmitLifetime --*/
 typedef struct hfa384x_MaxTransmitLifetime
 {
-	UINT16	MaxTransmitLifetime	__WLAN_ATTRIB_PACK__;
+	UINT16	MaxTransmitLifetime;
 } __WLAN_ATTRIB_PACK__ hfa384x_MaxTransmitLifetime_t;
 
 /*-- Information Record: MaxReceiveLifetime --*/
 typedef struct hfa384x_MaxReceiveLifetime
 {
-	UINT16	MaxReceiveLifetime	__WLAN_ATTRIB_PACK__;
+	UINT16	MaxReceiveLifetime;
 } __WLAN_ATTRIB_PACK__ hfa384x_MaxReceiveLifetime_t;
 
 /*-- Information Record: CFPollable --*/
 typedef struct hfa384x_CFPollable
 {
-	UINT16	CFPollable		__WLAN_ATTRIB_PACK__;
+	UINT16	CFPollable;
 } __WLAN_ATTRIB_PACK__ hfa384x_CFPollable_t;
 
 /*-- Information Record: AuthenticationAlgorithms --*/
 typedef struct hfa384x_AuthenticationAlgorithms
 {
-	UINT16	AuthenticationType	__WLAN_ATTRIB_PACK__;
-	UINT16	TypeEnabled		__WLAN_ATTRIB_PACK__;
+	UINT16	AuthenticationType;
+	UINT16	TypeEnabled;
 } __WLAN_ATTRIB_PACK__ hfa384x_AuthenticationAlgorithms_t;
 
 /*-- Information Record: AuthenticationAlgorithms
 (data only --*/
 typedef struct hfa384x_AuthenticationAlgorithms_data
 {
-	UINT16	AuthenticationType	__WLAN_ATTRIB_PACK__;
-	UINT16	TypeEnabled		__WLAN_ATTRIB_PACK__;
+	UINT16	AuthenticationType;
+	UINT16	TypeEnabled;
 } __WLAN_ATTRIB_PACK__ hfa384x_AuthenticationAlgorithms_data_t;
 
 /*-- Information Record: PrivacyOptionImplemented --*/
 typedef struct hfa384x_PrivacyOptionImplemented
 {
-	UINT16	PrivacyOptionImplemented	__WLAN_ATTRIB_PACK__;
+	UINT16	PrivacyOptionImplemented;
 } __WLAN_ATTRIB_PACK__ hfa384x_PrivacyOptionImplemented_t;
 
 /*-- Information Record: OwnMACAddress --*/
 typedef struct hfa384x_OwnMACAddress
 {
-	UINT8	OwnMACAddress[6]	__WLAN_ATTRIB_PACK__;
+	UINT8	OwnMACAddress[6];
 } __WLAN_ATTRIB_PACK__ hfa384x_OwnMACAddress_t;
 
 /*-- Information Record: PCFInfo --*/
 typedef struct hfa384x_PCFInfo
 {
-	UINT16	MediumOccupancyLimit	__WLAN_ATTRIB_PACK__;
-	UINT16	CFPPeriod		__WLAN_ATTRIB_PACK__;
-	UINT16	CFPMaxDuration		__WLAN_ATTRIB_PACK__;
-	UINT16	CFPFlags		__WLAN_ATTRIB_PACK__;
+	UINT16	MediumOccupancyLimit;
+	UINT16	CFPPeriod;
+	UINT16	CFPMaxDuration;
+	UINT16	CFPFlags;
 } __WLAN_ATTRIB_PACK__ hfa384x_PCFInfo_t;
 
 /*-- Information Record: PCFInfo (data portion only) --*/
 typedef struct hfa384x_PCFInfo_data
 {
-	UINT16	MediumOccupancyLimit	__WLAN_ATTRIB_PACK__;
-	UINT16	CFPPeriod		__WLAN_ATTRIB_PACK__;
-	UINT16	CFPMaxDuration		__WLAN_ATTRIB_PACK__;
-	UINT16	CFPFlags		__WLAN_ATTRIB_PACK__;
+	UINT16	MediumOccupancyLimit;
+	UINT16	CFPPeriod;
+	UINT16	CFPMaxDuration;
+	UINT16	CFPFlags;
 } __WLAN_ATTRIB_PACK__ hfa384x_PCFInfo_data_t;
 
 /*--------------------------------------------------------------------
@@ -1517,39 +1517,39 @@
 /*-- Information Record: PHYType --*/
 typedef struct hfa384x_PHYType
 {
-	UINT16	PHYType			__WLAN_ATTRIB_PACK__;
+	UINT16	PHYType;
 } __WLAN_ATTRIB_PACK__ hfa384x_PHYType_t;
 
 /*-- Information Record: CurrentChannel --*/
 typedef struct hfa384x_CurrentChannel
 {
-	UINT16	CurrentChannel		__WLAN_ATTRIB_PACK__;
+	UINT16	CurrentChannel;
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentChannel_t;
 
 /*-- Information Record: CurrentPowerState --*/
 typedef struct hfa384x_CurrentPowerState
 {
-	UINT16	CurrentPowerState	__WLAN_ATTRIB_PACK__;
+	UINT16	CurrentPowerState;
 } __WLAN_ATTRIB_PACK__ hfa384x_CurrentPowerState_t;
 
 /*-- Information Record: CCAMode --*/
 typedef struct hfa384x_CCAMode
 {
-	UINT16	CCAMode			__WLAN_ATTRIB_PACK__;
+	UINT16	CCAMode;
 } __WLAN_ATTRIB_PACK__ hfa384x_CCAMode_t;
 
 /*-- Information Record: SupportedDataRates --*/
 typedef struct hfa384x_SupportedDataRates
 {
-	UINT8	SupportedDataRates[10]	__WLAN_ATTRIB_PACK__;
+	UINT8	SupportedDataRates[10];
 } __WLAN_ATTRIB_PACK__ hfa384x_SupportedDataRates_t;
 
 /*-- Information Record: LFOStatus --*/
 typedef struct hfa384x_LFOStatus          
 {
-	UINT16  TestResults           	__WLAN_ATTRIB_PACK__;
-	UINT16  LFOResult             	__WLAN_ATTRIB_PACK__;
-	UINT16  VRHFOResult           	__WLAN_ATTRIB_PACK__;
+	UINT16  TestResults;
+	UINT16  LFOResult;
+	UINT16  VRHFOResult;
 } __WLAN_ATTRIB_PACK__ hfa384x_LFOStatus_t;
 
 #define HFA384x_TESTRESULT_ALLPASSED    BIT0
@@ -1561,11 +1561,11 @@
 /*-- Information Record: LEDControl --*/
 typedef struct hfa384x_LEDControl
 {
-	UINT16  searching_on          	__WLAN_ATTRIB_PACK__;
-	UINT16  searching_off         	__WLAN_ATTRIB_PACK__;
-	UINT16  assoc_on              	__WLAN_ATTRIB_PACK__;
-	UINT16  assoc_off             	__WLAN_ATTRIB_PACK__;
-	UINT16  activity              	__WLAN_ATTRIB_PACK__;
+	UINT16  searching_on;
+	UINT16  searching_off;
+	UINT16  assoc_on;
+	UINT16  assoc_off;
+	UINT16  activity;
 } __WLAN_ATTRIB_PACK__ hfa384x_LEDControl_t;
 
 /*--------------------------------------------------------------------
@@ -1611,30 +1611,30 @@
 /*-- Communication Frame: Transmit Frame Structure --*/
 typedef struct hfa384x_tx_frame
 {
-	UINT16	status			__WLAN_ATTRIB_PACK__;
-	UINT16	reserved1		__WLAN_ATTRIB_PACK__;
-	UINT16	reserved2		__WLAN_ATTRIB_PACK__;
-	UINT32	sw_support		__WLAN_ATTRIB_PACK__;
-	UINT8	tx_retrycount		__WLAN_ATTRIB_PACK__;
-	UINT8   tx_rate                 __WLAN_ATTRIB_PACK__;
-	UINT16	tx_control		__WLAN_ATTRIB_PACK__;
+	UINT16	status;
+	UINT16	reserved1;
+	UINT16	reserved2;
+	UINT32	sw_support;
+	UINT8	tx_retrycount;
+	UINT8   tx_rate;
+	UINT16	tx_control;
 
 	/*-- 802.11 Header Information --*/
 
-	UINT16	frame_control		__WLAN_ATTRIB_PACK__;
-	UINT16	duration_id		__WLAN_ATTRIB_PACK__;
-	UINT8	address1[6]		__WLAN_ATTRIB_PACK__;
-	UINT8	address2[6]		__WLAN_ATTRIB_PACK__;
-	UINT8	address3[6]		__WLAN_ATTRIB_PACK__;
-	UINT16	sequence_control	__WLAN_ATTRIB_PACK__;
-	UINT8	address4[6]		__WLAN_ATTRIB_PACK__;
-	UINT16	data_len		__WLAN_ATTRIB_PACK__; /* little endian format */
+	UINT16	frame_control;
+	UINT16	duration_id;
+	UINT8	address1[6];
+	UINT8	address2[6];
+	UINT8	address3[6];
+	UINT16	sequence_control;
+	UINT8	address4[6];
+	UINT16	data_len; /* little endian format */
 
 	/*-- 802.3 Header Information --*/
 
-	UINT8	dest_addr[6]		__WLAN_ATTRIB_PACK__;
-	UINT8	src_addr[6]		__WLAN_ATTRIB_PACK__;
-	UINT16	data_length		__WLAN_ATTRIB_PACK__; /* big endian format */
+	UINT8	dest_addr[6];
+	UINT8	src_addr[6];
+	UINT16	data_length; /* big endian format */
 } __WLAN_ATTRIB_PACK__ hfa384x_tx_frame_t;
 /*--------------------------------------------------------------------
 Communication Frames: Field Masks for Transmit Frames
@@ -1696,29 +1696,29 @@
 typedef struct hfa384x_rx_frame
 {
 	/*-- MAC rx descriptor (hfa384x byte order) --*/
-	UINT16	status			__WLAN_ATTRIB_PACK__;
-	UINT32	time			__WLAN_ATTRIB_PACK__;
-	UINT8	silence			__WLAN_ATTRIB_PACK__;
-	UINT8	signal			__WLAN_ATTRIB_PACK__;
-	UINT8	rate			__WLAN_ATTRIB_PACK__;
-	UINT8	rx_flow			__WLAN_ATTRIB_PACK__;
-	UINT16	reserved1		__WLAN_ATTRIB_PACK__;
-	UINT16	reserved2		__WLAN_ATTRIB_PACK__;
+	UINT16	status;
+	UINT32	time;
+	UINT8	silence;
+	UINT8	signal;
+	UINT8	rate;
+	UINT8	rx_flow;
+	UINT16	reserved1;
+	UINT16	reserved2;
 
 	/*-- 802.11 Header Information (802.11 byte order) --*/
-	UINT16	frame_control		__WLAN_ATTRIB_PACK__;
-	UINT16	duration_id		__WLAN_ATTRIB_PACK__;
-	UINT8	address1[6]		__WLAN_ATTRIB_PACK__;
-	UINT8	address2[6]		__WLAN_ATTRIB_PACK__;
-	UINT8	address3[6]		__WLAN_ATTRIB_PACK__;
-	UINT16	sequence_control	__WLAN_ATTRIB_PACK__;
-	UINT8	address4[6]		__WLAN_ATTRIB_PACK__;
-	UINT16	data_len		__WLAN_ATTRIB_PACK__; /* hfa384x (little endian) format */
+	UINT16	frame_control;
+	UINT16	duration_id;
+	UINT8	address1[6];
+	UINT8	address2[6];
+	UINT8	address3[6];
+	UINT16	sequence_control;
+	UINT8	address4[6];
+	UINT16	data_len; /* hfa384x (little endian) format */
 
 	/*-- 802.3 Header Information --*/
-	UINT8	dest_addr[6]		__WLAN_ATTRIB_PACK__;
-	UINT8	src_addr[6]		__WLAN_ATTRIB_PACK__;
-	UINT16	data_length		__WLAN_ATTRIB_PACK__; /* IEEE? (big endian) format */
+	UINT8	dest_addr[6];
+	UINT8	src_addr[6];
+	UINT16	data_length; /* IEEE? (big endian) format */
 } __WLAN_ATTRIB_PACK__ hfa384x_rx_frame_t;
 /*--------------------------------------------------------------------
 Communication Frames: Field Masks for Receive Frames
@@ -1769,91 +1769,91 @@
 /*--  Notification Frame,MAC Mgmt: Handover Address --*/
 typedef struct hfa384x_HandoverAddr
 {
-	UINT16	framelen			__WLAN_ATTRIB_PACK__;
-	UINT16	infotype			__WLAN_ATTRIB_PACK__;
-	UINT8	handover_addr[WLAN_BSSID_LEN]	__WLAN_ATTRIB_PACK__;
+	UINT16	framelen;
+	UINT16	infotype;
+	UINT8	handover_addr[WLAN_BSSID_LEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_HandoverAddr_t;
 
 /*--  Inquiry Frame, Diagnose: Communication Tallies --*/
 typedef struct hfa384x_CommTallies16
 {
-	UINT16	txunicastframes		__WLAN_ATTRIB_PACK__;
-	UINT16	txmulticastframes	__WLAN_ATTRIB_PACK__;
-	UINT16	txfragments		__WLAN_ATTRIB_PACK__;
-	UINT16	txunicastoctets		__WLAN_ATTRIB_PACK__;
-	UINT16	txmulticastoctets	__WLAN_ATTRIB_PACK__;
-	UINT16	txdeferredtrans		__WLAN_ATTRIB_PACK__;
-	UINT16	txsingleretryframes	__WLAN_ATTRIB_PACK__;
-	UINT16	txmultipleretryframes	__WLAN_ATTRIB_PACK__;
-	UINT16	txretrylimitexceeded	__WLAN_ATTRIB_PACK__;
-	UINT16	txdiscards		__WLAN_ATTRIB_PACK__;
-	UINT16	rxunicastframes		__WLAN_ATTRIB_PACK__;
-	UINT16	rxmulticastframes	__WLAN_ATTRIB_PACK__;
-	UINT16	rxfragments		__WLAN_ATTRIB_PACK__;
-	UINT16	rxunicastoctets		__WLAN_ATTRIB_PACK__;
-	UINT16	rxmulticastoctets	__WLAN_ATTRIB_PACK__;
-	UINT16	rxfcserrors		__WLAN_ATTRIB_PACK__;
-	UINT16	rxdiscardsnobuffer	__WLAN_ATTRIB_PACK__;
-	UINT16	txdiscardswrongsa	__WLAN_ATTRIB_PACK__;
-	UINT16	rxdiscardswepundecr	__WLAN_ATTRIB_PACK__;
-	UINT16	rxmsginmsgfrag		__WLAN_ATTRIB_PACK__;
-	UINT16	rxmsginbadmsgfrag	__WLAN_ATTRIB_PACK__;
+	UINT16	txunicastframes;
+	UINT16	txmulticastframes;
+	UINT16	txfragments;
+	UINT16	txunicastoctets;
+	UINT16	txmulticastoctets;
+	UINT16	txdeferredtrans;
+	UINT16	txsingleretryframes;
+	UINT16	txmultipleretryframes;
+	UINT16	txretrylimitexceeded;
+	UINT16	txdiscards;
+	UINT16	rxunicastframes;
+	UINT16	rxmulticastframes;
+	UINT16	rxfragments;
+	UINT16	rxunicastoctets;
+	UINT16	rxmulticastoctets;
+	UINT16	rxfcserrors;
+	UINT16	rxdiscardsnobuffer;
+	UINT16	txdiscardswrongsa;
+	UINT16	rxdiscardswepundecr;
+	UINT16	rxmsginmsgfrag;
+	UINT16	rxmsginbadmsgfrag;
 } __WLAN_ATTRIB_PACK__ hfa384x_CommTallies16_t;
 
 typedef struct hfa384x_CommTallies32
 {
-	UINT32	txunicastframes		__WLAN_ATTRIB_PACK__;
-	UINT32	txmulticastframes	__WLAN_ATTRIB_PACK__;
-	UINT32	txfragments		__WLAN_ATTRIB_PACK__;
-	UINT32	txunicastoctets		__WLAN_ATTRIB_PACK__;
-	UINT32	txmulticastoctets	__WLAN_ATTRIB_PACK__;
-	UINT32	txdeferredtrans		__WLAN_ATTRIB_PACK__;
-	UINT32	txsingleretryframes	__WLAN_ATTRIB_PACK__;
-	UINT32	txmultipleretryframes	__WLAN_ATTRIB_PACK__;
-	UINT32	txretrylimitexceeded	__WLAN_ATTRIB_PACK__;
-	UINT32	txdiscards		__WLAN_ATTRIB_PACK__;
-	UINT32	rxunicastframes		__WLAN_ATTRIB_PACK__;
-	UINT32	rxmulticastframes	__WLAN_ATTRIB_PACK__;
-	UINT32	rxfragments		__WLAN_ATTRIB_PACK__;
-	UINT32	rxunicastoctets		__WLAN_ATTRIB_PACK__;
-	UINT32	rxmulticastoctets	__WLAN_ATTRIB_PACK__;
-	UINT32	rxfcserrors		__WLAN_ATTRIB_PACK__;
-	UINT32	rxdiscardsnobuffer	__WLAN_ATTRIB_PACK__;
-	UINT32	txdiscardswrongsa	__WLAN_ATTRIB_PACK__;
-	UINT32	rxdiscardswepundecr	__WLAN_ATTRIB_PACK__;
-	UINT32	rxmsginmsgfrag		__WLAN_ATTRIB_PACK__;
-	UINT32	rxmsginbadmsgfrag	__WLAN_ATTRIB_PACK__;
+	UINT32	txunicastframes;
+	UINT32	txmulticastframes;
+	UINT32	txfragments;
+	UINT32	txunicastoctets;
+	UINT32	txmulticastoctets;
+	UINT32	txdeferredtrans;
+	UINT32	txsingleretryframes;
+	UINT32	txmultipleretryframes;
+	UINT32	txretrylimitexceeded;
+	UINT32	txdiscards;
+	UINT32	rxunicastframes;
+	UINT32	rxmulticastframes;
+	UINT32	rxfragments;
+	UINT32	rxunicastoctets;
+	UINT32	rxmulticastoctets;
+	UINT32	rxfcserrors;
+	UINT32	rxdiscardsnobuffer;
+	UINT32	txdiscardswrongsa;
+	UINT32	rxdiscardswepundecr;
+	UINT32	rxmsginmsgfrag;
+	UINT32	rxmsginbadmsgfrag;
 } __WLAN_ATTRIB_PACK__ hfa384x_CommTallies32_t;
 
 /*--  Inquiry Frame, Diagnose: Scan Results & Subfields--*/
 typedef struct hfa384x_ScanResultSub
 {
-	UINT16	chid			__WLAN_ATTRIB_PACK__;
-	UINT16	anl			__WLAN_ATTRIB_PACK__;
-	UINT16	sl			__WLAN_ATTRIB_PACK__;
-	UINT8	bssid[WLAN_BSSID_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	bcnint			__WLAN_ATTRIB_PACK__;
-	UINT16	capinfo			__WLAN_ATTRIB_PACK__;
-	hfa384x_bytestr32_t	ssid	__WLAN_ATTRIB_PACK__;
-	UINT8	supprates[10]		__WLAN_ATTRIB_PACK__; /* 802.11 info element */
-	UINT16	proberesp_rate		__WLAN_ATTRIB_PACK__;
+	UINT16	chid;
+	UINT16	anl;
+	UINT16	sl;
+	UINT8	bssid[WLAN_BSSID_LEN];
+	UINT16	bcnint;
+	UINT16	capinfo;
+	hfa384x_bytestr32_t	ssid;
+	UINT8	supprates[10]; /* 802.11 info element */
+	UINT16	proberesp_rate;
 } __WLAN_ATTRIB_PACK__ hfa384x_ScanResultSub_t;
 
 typedef struct hfa384x_ScanResult
 {
-	UINT16	rsvd				__WLAN_ATTRIB_PACK__;
-	UINT16	scanreason			__WLAN_ATTRIB_PACK__;
+	UINT16	rsvd;
+	UINT16	scanreason;
 	hfa384x_ScanResultSub_t
-		result[HFA384x_SCANRESULT_MAX]	__WLAN_ATTRIB_PACK__;
+		result[HFA384x_SCANRESULT_MAX];
 } __WLAN_ATTRIB_PACK__ hfa384x_ScanResult_t;
 
 /*--  Inquiry Frame, Diagnose: ChInfo Results & Subfields--*/
 typedef struct hfa384x_ChInfoResultSub
 {
-	UINT16	chid			__WLAN_ATTRIB_PACK__;
-	UINT16	anl			__WLAN_ATTRIB_PACK__;
-	UINT16	pnl			__WLAN_ATTRIB_PACK__;
-	UINT16	active			__WLAN_ATTRIB_PACK__;
+	UINT16	chid;
+	UINT16	anl;
+	UINT16	pnl;
+	UINT16	active;
 } __WLAN_ATTRIB_PACK__ hfa384x_ChInfoResultSub_t;
 
 #define HFA384x_CHINFORESULT_BSSACTIVE	BIT0
@@ -1861,32 +1861,32 @@
 
 typedef struct hfa384x_ChInfoResult
 {
-	UINT16	scanchannels		__WLAN_ATTRIB_PACK__;
+	UINT16	scanchannels;
 	hfa384x_ChInfoResultSub_t	
-		result[HFA384x_CHINFORESULT_MAX] __WLAN_ATTRIB_PACK__;
+		result[HFA384x_CHINFORESULT_MAX];
 } __WLAN_ATTRIB_PACK__ hfa384x_ChInfoResult_t;
 
 /*--  Inquiry Frame, Diagnose: Host Scan Results & Subfields--*/
 typedef struct hfa384x_HScanResultSub
 {
-	UINT16	chid			__WLAN_ATTRIB_PACK__;
-	UINT16	anl			__WLAN_ATTRIB_PACK__;
-	UINT16	sl			__WLAN_ATTRIB_PACK__;
-	UINT8	bssid[WLAN_BSSID_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	bcnint			__WLAN_ATTRIB_PACK__;
-	UINT16	capinfo			__WLAN_ATTRIB_PACK__;
-	hfa384x_bytestr32_t	ssid	__WLAN_ATTRIB_PACK__;
-	UINT8	supprates[10]		__WLAN_ATTRIB_PACK__; /* 802.11 info element */
-	UINT16	proberesp_rate		__WLAN_ATTRIB_PACK__;
-	UINT16	atim			__WLAN_ATTRIB_PACK__;
+	UINT16	chid;
+	UINT16	anl;
+	UINT16	sl;
+	UINT8	bssid[WLAN_BSSID_LEN];
+	UINT16	bcnint;
+	UINT16	capinfo;
+	hfa384x_bytestr32_t	ssid;
+	UINT8	supprates[10]; /* 802.11 info element */
+	UINT16	proberesp_rate;
+	UINT16	atim;
 } __WLAN_ATTRIB_PACK__ hfa384x_HScanResultSub_t;
 
 typedef struct hfa384x_HScanResult
 {
-	UINT16	nresult				__WLAN_ATTRIB_PACK__;
-	UINT16	rsvd				__WLAN_ATTRIB_PACK__;
+	UINT16	nresult;
+	UINT16	rsvd;
 	hfa384x_HScanResultSub_t
-		result[HFA384x_HSCANRESULT_MAX]	__WLAN_ATTRIB_PACK__;
+		result[HFA384x_HSCANRESULT_MAX];
 } __WLAN_ATTRIB_PACK__ hfa384x_HScanResult_t;
 
 /*--  Unsolicited Frame, MAC Mgmt: LinkStatus --*/
@@ -1901,7 +1901,7 @@
 
 typedef struct hfa384x_LinkStatus
 {
-	UINT16	linkstatus		__WLAN_ATTRIB_PACK__;
+	UINT16	linkstatus;
 } __WLAN_ATTRIB_PACK__ hfa384x_LinkStatus_t;
 
 
@@ -1915,29 +1915,29 @@
 
 typedef struct hfa384x_AssocStatus
 {
-	UINT16	assocstatus		__WLAN_ATTRIB_PACK__;
-	UINT8	sta_addr[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
+	UINT16	assocstatus;
+	UINT8	sta_addr[WLAN_ADDR_LEN];
 	/* old_ap_addr is only valid if assocstatus == 2 */
-	UINT8	old_ap_addr[WLAN_ADDR_LEN] __WLAN_ATTRIB_PACK__;
-	UINT16	reason			__WLAN_ATTRIB_PACK__;
-	UINT16	reserved		__WLAN_ATTRIB_PACK__;
+	UINT8	old_ap_addr[WLAN_ADDR_LEN];
+	UINT16	reason;
+	UINT16	reserved;
 } __WLAN_ATTRIB_PACK__ hfa384x_AssocStatus_t;
 
 /*--  Unsolicited Frame, MAC Mgmt: AuthRequest (AP Only) --*/
 
 typedef struct hfa384x_AuthRequest
 {
-	UINT8	sta_addr[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	algorithm		__WLAN_ATTRIB_PACK__;
+	UINT8	sta_addr[WLAN_ADDR_LEN];
+	UINT16	algorithm;
 } __WLAN_ATTRIB_PACK__ hfa384x_AuthReq_t;
 
 /*--  Unsolicited Frame, MAC Mgmt: AssocRequest (AP Only) --*/
 
 typedef struct hfa384x_AssocRequest
 {
-	UINT8	sta_addr[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	type         		__WLAN_ATTRIB_PACK__;
-	UINT8   wpa_data[80] 		__WLAN_ATTRIB_PACK__;
+	UINT8	sta_addr[WLAN_ADDR_LEN];
+	UINT16	type;
+	UINT8   wpa_data[80];
 } __WLAN_ATTRIB_PACK__ hfa384x_AssocReq_t;
 
 
@@ -1948,42 +1948,42 @@
 
 typedef struct hfa384x_MicFailure  
 {
-	UINT8	sender[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT8	dest[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
+	UINT8	sender[WLAN_ADDR_LEN];
+	UINT8	dest[WLAN_ADDR_LEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_MicFailure_t;
 
 /*--  Unsolicited Frame, MAC Mgmt: PSUserCount (AP Only) --*/
 
 typedef struct hfa384x_PSUserCount
 {
-	UINT16	usercnt			__WLAN_ATTRIB_PACK__;
+	UINT16	usercnt;
 } __WLAN_ATTRIB_PACK__ hfa384x_PSUserCount_t;
 
 typedef struct hfa384x_KeyIDChanged
 {
-	UINT8	sta_addr[WLAN_ADDR_LEN]	__WLAN_ATTRIB_PACK__;
-	UINT16	keyid			__WLAN_ATTRIB_PACK__;
+	UINT8	sta_addr[WLAN_ADDR_LEN];
+	UINT16	keyid;
 } __WLAN_ATTRIB_PACK__ hfa384x_KeyIDChanged_t;
 
 /*--  Collection of all Inf frames ---------------*/
 typedef union hfa384x_infodata {
-	hfa384x_CommTallies16_t	commtallies16	__WLAN_ATTRIB_PACK__;
-	hfa384x_CommTallies32_t	commtallies32	__WLAN_ATTRIB_PACK__;
-	hfa384x_ScanResult_t	scanresult	__WLAN_ATTRIB_PACK__;
-	hfa384x_ChInfoResult_t	chinforesult	__WLAN_ATTRIB_PACK__;
-	hfa384x_HScanResult_t	hscanresult	__WLAN_ATTRIB_PACK__;
-	hfa384x_LinkStatus_t	linkstatus	__WLAN_ATTRIB_PACK__;
-	hfa384x_AssocStatus_t	assocstatus	__WLAN_ATTRIB_PACK__;
-	hfa384x_AuthReq_t	authreq		__WLAN_ATTRIB_PACK__;
-	hfa384x_PSUserCount_t	psusercnt	__WLAN_ATTRIB_PACK__;
-	hfa384x_KeyIDChanged_t  keyidchanged    __WLAN_ATTRIB_PACK__;
+	hfa384x_CommTallies16_t	commtallies16;
+	hfa384x_CommTallies32_t	commtallies32;
+	hfa384x_ScanResult_t	scanresult;
+	hfa384x_ChInfoResult_t	chinforesult;
+	hfa384x_HScanResult_t	hscanresult;
+	hfa384x_LinkStatus_t	linkstatus;
+	hfa384x_AssocStatus_t	assocstatus;
+	hfa384x_AuthReq_t	authreq;
+	hfa384x_PSUserCount_t	psusercnt;
+	hfa384x_KeyIDChanged_t  keyidchanged;
 } __WLAN_ATTRIB_PACK__ hfa384x_infodata_t;
 
 typedef struct hfa384x_InfFrame
 {
-	UINT16			framelen	__WLAN_ATTRIB_PACK__;
-	UINT16			infotype	__WLAN_ATTRIB_PACK__;
-	hfa384x_infodata_t	info 		__WLAN_ATTRIB_PACK__;
+	UINT16			framelen;
+	UINT16			infotype;
+	hfa384x_infodata_t	info;
 } __WLAN_ATTRIB_PACK__ hfa384x_InfFrame_t;
 
 #if (WLAN_HOSTIF == WLAN_USB)
@@ -2019,123 +2019,123 @@
 /* Request (bulk OUT) packet contents */
 
 typedef struct hfa384x_usb_txfrm {
-	hfa384x_tx_frame_t	desc			__WLAN_ATTRIB_PACK__;
-	UINT8			data[WLAN_DATA_MAXLEN]	__WLAN_ATTRIB_PACK__;
+	hfa384x_tx_frame_t	desc;
+	UINT8			data[WLAN_DATA_MAXLEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_txfrm_t;
 
 typedef struct hfa384x_usb_cmdreq {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		cmd				__WLAN_ATTRIB_PACK__;
-	UINT16		parm0				__WLAN_ATTRIB_PACK__;
-	UINT16		parm1				__WLAN_ATTRIB_PACK__;
-	UINT16		parm2				__WLAN_ATTRIB_PACK__;
-	UINT8		pad[54]				__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		cmd;
+	UINT16		parm0;
+	UINT16		parm1;
+	UINT16		parm2;
+	UINT8		pad[54];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_cmdreq_t;
 
 typedef struct hfa384x_usb_wridreq {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
-	UINT16		rid				__WLAN_ATTRIB_PACK__;
-	UINT8		data[HFA384x_RIDDATA_MAXLEN]	__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
+	UINT16		rid;
+	UINT8		data[HFA384x_RIDDATA_MAXLEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_wridreq_t;
 
 typedef struct hfa384x_usb_rridreq {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
-	UINT16		rid				__WLAN_ATTRIB_PACK__;
-	UINT8		pad[58]				__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
+	UINT16		rid;
+	UINT8		pad[58];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_rridreq_t;
 
 typedef struct hfa384x_usb_wmemreq {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
-	UINT16		offset				__WLAN_ATTRIB_PACK__;
-	UINT16		page				__WLAN_ATTRIB_PACK__;
-	UINT8		data[HFA384x_USB_RWMEM_MAXLEN]	__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
+	UINT16		offset;
+	UINT16		page;
+	UINT8		data[HFA384x_USB_RWMEM_MAXLEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_wmemreq_t;
 
 typedef struct hfa384x_usb_rmemreq {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
-	UINT16		offset				__WLAN_ATTRIB_PACK__;
-	UINT16		page				__WLAN_ATTRIB_PACK__;
-	UINT8		pad[56]				__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
+	UINT16		offset;
+	UINT16		page;
+	UINT8		pad[56];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_rmemreq_t;
 
 /*------------------------------------*/
 /* Response (bulk IN) packet contents */
 
 typedef struct hfa384x_usb_rxfrm {
-	hfa384x_rx_frame_t	desc			__WLAN_ATTRIB_PACK__;
-	UINT8			data[WLAN_DATA_MAXLEN]	__WLAN_ATTRIB_PACK__;
+	hfa384x_rx_frame_t	desc;
+	UINT8			data[WLAN_DATA_MAXLEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_rxfrm_t;
 
 typedef struct hfa384x_usb_infofrm {
-	UINT16			type			__WLAN_ATTRIB_PACK__;
-	hfa384x_InfFrame_t	info			__WLAN_ATTRIB_PACK__;
+	UINT16			type;
+	hfa384x_InfFrame_t	info;
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_infofrm_t;
 
 typedef struct hfa384x_usb_statusresp {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		status				__WLAN_ATTRIB_PACK__;
-	UINT16		resp0				__WLAN_ATTRIB_PACK__;
-	UINT16		resp1				__WLAN_ATTRIB_PACK__;
-	UINT16		resp2				__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		status;
+	UINT16		resp0;
+	UINT16		resp1;
+	UINT16		resp2;
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_cmdresp_t;
 
 typedef hfa384x_usb_cmdresp_t hfa384x_usb_wridresp_t;
 
 typedef struct hfa384x_usb_rridresp {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
-	UINT16		rid				__WLAN_ATTRIB_PACK__;
-	UINT8		data[HFA384x_RIDDATA_MAXLEN]	__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
+	UINT16		rid;
+	UINT8		data[HFA384x_RIDDATA_MAXLEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_rridresp_t;
 
 typedef hfa384x_usb_cmdresp_t hfa384x_usb_wmemresp_t;
 
 typedef struct hfa384x_usb_rmemresp {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
-	UINT8		data[HFA384x_USB_RWMEM_MAXLEN]	__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
+	UINT8		data[HFA384x_USB_RWMEM_MAXLEN];
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_rmemresp_t;
 
 typedef struct hfa384x_usb_bufavail {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		frmlen				__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		frmlen;
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_bufavail_t;
 
 typedef struct hfa384x_usb_error {
-	UINT16		type				__WLAN_ATTRIB_PACK__;
-	UINT16		errortype			__WLAN_ATTRIB_PACK__;
+	UINT16		type;
+	UINT16		errortype;
 } __WLAN_ATTRIB_PACK__ hfa384x_usb_error_t;
 
 /*----------------------------------------------------------*/
 /* Unions for packaging all the known packet types together */
 
 typedef union hfa384x_usbout {
-	UINT16			type			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_txfrm_t	txfrm			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_cmdreq_t	cmdreq			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_wridreq_t	wridreq			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_rridreq_t	rridreq			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_wmemreq_t	wmemreq			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_rmemreq_t	rmemreq			__WLAN_ATTRIB_PACK__;
+	UINT16			type;
+	hfa384x_usb_txfrm_t	txfrm;
+	hfa384x_usb_cmdreq_t	cmdreq;
+	hfa384x_usb_wridreq_t	wridreq;
+	hfa384x_usb_rridreq_t	rridreq;
+	hfa384x_usb_wmemreq_t	wmemreq;
+	hfa384x_usb_rmemreq_t	rmemreq;
 } __WLAN_ATTRIB_PACK__ hfa384x_usbout_t;
 
 typedef union hfa384x_usbin {
-	UINT16			type			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_rxfrm_t	rxfrm			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_txfrm_t	txfrm			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_infofrm_t	infofrm			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_cmdresp_t	cmdresp			__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_wridresp_t	wridresp		__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_rridresp_t	rridresp		__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_wmemresp_t	wmemresp		__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_rmemresp_t	rmemresp		__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_bufavail_t	bufavail		__WLAN_ATTRIB_PACK__;
-	hfa384x_usb_error_t	usberror		__WLAN_ATTRIB_PACK__;
-	UINT8			boguspad[3000]		__WLAN_ATTRIB_PACK__;
+	UINT16			type;
+	hfa384x_usb_rxfrm_t	rxfrm;
+	hfa384x_usb_txfrm_t	txfrm;
+	hfa384x_usb_infofrm_t	infofrm;
+	hfa384x_usb_cmdresp_t	cmdresp;
+	hfa384x_usb_wridresp_t	wridresp;
+	hfa384x_usb_rridresp_t	rridresp;
+	hfa384x_usb_wmemresp_t	wmemresp;
+	hfa384x_usb_rmemresp_t	rmemresp;
+	hfa384x_usb_bufavail_t	bufavail;
+	hfa384x_usb_error_t	usberror;
+	UINT8			boguspad[3000];
 } __WLAN_ATTRIB_PACK__ hfa384x_usbin_t;
 
 #endif /* WLAN_USB */
@@ -2146,241 +2146,241 @@
 
 typedef struct hfa384x_pdr_pcb_partnum
 {
-	UINT8	num[8]		__WLAN_ATTRIB_PACK__;
+	UINT8	num[8];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_pcb_partnum_t;
 
 typedef struct hfa384x_pdr_pcb_tracenum
 {
-	UINT8	num[8]		__WLAN_ATTRIB_PACK__;
+	UINT8	num[8];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_pcb_tracenum_t;
 
 typedef struct hfa384x_pdr_nic_serial
 {
-	UINT8	num[12]		__WLAN_ATTRIB_PACK__;
+	UINT8	num[12];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_nic_serial_t;
 
 typedef struct hfa384x_pdr_mkk_measurements
 {
-	double	carrier_freq	__WLAN_ATTRIB_PACK__;
-	double	occupied_band	__WLAN_ATTRIB_PACK__;
-	double	power_density	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_f1	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_f2	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_f3	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_f4	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_l1	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_l2	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_l3	__WLAN_ATTRIB_PACK__;
-	double	tx_spur_l4	__WLAN_ATTRIB_PACK__;
-	double	rx_spur_f1	__WLAN_ATTRIB_PACK__;
-	double	rx_spur_f2	__WLAN_ATTRIB_PACK__;
-	double	rx_spur_l1	__WLAN_ATTRIB_PACK__;
-	double	rx_spur_l2	__WLAN_ATTRIB_PACK__;
+	double	carrier_freq;
+	double	occupied_band;
+	double	power_density;
+	double	tx_spur_f1;
+	double	tx_spur_f2;
+	double	tx_spur_f3;
+	double	tx_spur_f4;
+	double	tx_spur_l1;
+	double	tx_spur_l2;
+	double	tx_spur_l3;
+	double	tx_spur_l4;
+	double	rx_spur_f1;
+	double	rx_spur_f2;
+	double	rx_spur_l1;
+	double	rx_spur_l2;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_mkk_measurements_t;
 
 typedef struct hfa384x_pdr_nic_ramsize
 {
-	UINT8	size[12]	__WLAN_ATTRIB_PACK__; /* units of KB */
+	UINT8	size[12]; /* units of KB */
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_nic_ramsize_t;
 
 typedef struct hfa384x_pdr_mfisuprange
 {
-	UINT16	id			__WLAN_ATTRIB_PACK__;
-	UINT16	variant			__WLAN_ATTRIB_PACK__;
-	UINT16	bottom			__WLAN_ATTRIB_PACK__;
-	UINT16	top			__WLAN_ATTRIB_PACK__;
+	UINT16	id;
+	UINT16	variant;
+	UINT16	bottom;
+	UINT16	top;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_mfisuprange_t;
 
 typedef struct hfa384x_pdr_cfisuprange
 {
-	UINT16	id			__WLAN_ATTRIB_PACK__;
-	UINT16	variant			__WLAN_ATTRIB_PACK__;
-	UINT16	bottom			__WLAN_ATTRIB_PACK__;
-	UINT16	top			__WLAN_ATTRIB_PACK__;
+	UINT16	id;
+	UINT16	variant;
+	UINT16	bottom;
+	UINT16	top;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_cfisuprange_t;
 
 typedef struct hfa384x_pdr_nicid
 {
-	UINT16	id			__WLAN_ATTRIB_PACK__;
-	UINT16	variant			__WLAN_ATTRIB_PACK__;
-	UINT16	major			__WLAN_ATTRIB_PACK__;
-	UINT16	minor			__WLAN_ATTRIB_PACK__;
+	UINT16	id;
+	UINT16	variant;
+	UINT16	major;
+	UINT16	minor;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_nicid_t;
 
 
 typedef struct hfa384x_pdr_refdac_measurements
 {
-	UINT16	value[0]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[0];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_refdac_measurements_t;
 
 typedef struct hfa384x_pdr_vgdac_measurements
 {
-	UINT16	value[0]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[0];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_vgdac_measurements_t;
 
 typedef struct hfa384x_pdr_level_comp_measurements
 {
-	UINT16	value[0]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[0];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_level_compc_measurements_t;
 
 typedef struct hfa384x_pdr_mac_address
 {
-	UINT8	addr[6]			__WLAN_ATTRIB_PACK__;
+	UINT8	addr[6];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_mac_address_t;
 
 typedef struct hfa384x_pdr_mkk_callname
 {
-	UINT8	callname[8]		__WLAN_ATTRIB_PACK__;
+	UINT8	callname[8];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_mkk_callname_t;
 
 typedef struct hfa384x_pdr_regdomain
 {
-	UINT16	numdomains		__WLAN_ATTRIB_PACK__;
-	UINT16	domain[5]		__WLAN_ATTRIB_PACK__;
+	UINT16	numdomains;
+	UINT16	domain[5];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_regdomain_t;
 
 typedef struct hfa384x_pdr_allowed_channel
 {
-	UINT16	ch_bitmap		__WLAN_ATTRIB_PACK__;
+	UINT16	ch_bitmap;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_allowed_channel_t;
 
 typedef struct hfa384x_pdr_default_channel
 {
-	UINT16	channel			__WLAN_ATTRIB_PACK__;
+	UINT16	channel;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_default_channel_t;
 
 typedef struct hfa384x_pdr_privacy_option
 {
-	UINT16	available		__WLAN_ATTRIB_PACK__;
+	UINT16	available;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_privacy_option_t;
 
 typedef struct hfa384x_pdr_temptype
 {
-	UINT16	type			__WLAN_ATTRIB_PACK__;
+	UINT16	type;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_temptype_t;
 
 typedef struct hfa384x_pdr_refdac_setup
 {
-	UINT16	ch_value[14]		__WLAN_ATTRIB_PACK__;
+	UINT16	ch_value[14];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_refdac_setup_t;
 
 typedef struct hfa384x_pdr_vgdac_setup
 {
-	UINT16	ch_value[14]		__WLAN_ATTRIB_PACK__;
+	UINT16	ch_value[14];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_vgdac_setup_t;
 
 typedef struct hfa384x_pdr_level_comp_setup
 {
-	UINT16	ch_value[14]		__WLAN_ATTRIB_PACK__;
+	UINT16	ch_value[14];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_level_comp_setup_t;
 
 typedef struct hfa384x_pdr_trimdac_setup
 {
-	UINT16	trimidac		__WLAN_ATTRIB_PACK__;
-	UINT16	trimqdac		__WLAN_ATTRIB_PACK__;
+	UINT16	trimidac;
+	UINT16	trimqdac;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_trimdac_setup_t;
 
 typedef struct hfa384x_pdr_ifr_setting
 {
-	UINT16	value[3]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[3];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_ifr_setting_t;
 
 typedef struct hfa384x_pdr_rfr_setting
 {
-	UINT16	value[3]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[3];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_rfr_setting_t;
 
 typedef struct hfa384x_pdr_hfa3861_baseline
 {
-	UINT16	value[50]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[50];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_baseline_t;
 
 typedef struct hfa384x_pdr_hfa3861_shadow
 {
-	UINT32	value[32]		__WLAN_ATTRIB_PACK__;
+	UINT32	value[32];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_shadow_t;
 
 typedef struct hfa384x_pdr_hfa3861_ifrf
 {
-	UINT32	value[20]		__WLAN_ATTRIB_PACK__;
+	UINT32	value[20];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_ifrf_t;
 
 typedef struct hfa384x_pdr_hfa3861_chcalsp
 {
-	UINT16	value[14]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[14];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_chcalsp_t;
 
 typedef struct hfa384x_pdr_hfa3861_chcali
 {
-	UINT16	value[17]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[17];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_chcali_t;
 
 typedef struct hfa384x_pdr_hfa3861_nic_config
 {
-	UINT16	config_bitmap		__WLAN_ATTRIB_PACK__;
+	UINT16	config_bitmap;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_nic_config_t;
 
 typedef struct hfa384x_pdr_hfo_delay
 {
-	UINT8   hfo_delay    		__WLAN_ATTRIB_PACK__;
+	UINT8   hfo_delay;
 } __WLAN_ATTRIB_PACK__ hfa384x_hfo_delay_t;
 
 typedef struct hfa384x_pdr_hfa3861_manf_testsp
 {
-	UINT16	value[30]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[30];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_manf_testsp_t;
 
 typedef struct hfa384x_pdr_hfa3861_manf_testi
 {
-	UINT16	value[30]		__WLAN_ATTRIB_PACK__;
+	UINT16	value[30];
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_hfa3861_manf_testi_t;
 
 typedef struct hfa384x_end_of_pda
 {
-	UINT16	crc			__WLAN_ATTRIB_PACK__;
+	UINT16	crc;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdr_end_of_pda_t;
 
 typedef struct hfa384x_pdrec
 {
-	UINT16	len		__WLAN_ATTRIB_PACK__; /* in words */
-	UINT16	code		__WLAN_ATTRIB_PACK__;
+	UINT16	len; /* in words */
+	UINT16	code;
 	union pdr {
-	hfa384x_pdr_pcb_partnum_t	pcb_partnum	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_pcb_tracenum_t	pcb_tracenum	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_nic_serial_t	nic_serial	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_mkk_measurements_t	mkk_measurements	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_nic_ramsize_t	nic_ramsize	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_mfisuprange_t	mfisuprange	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_cfisuprange_t	cfisuprange	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_nicid_t		nicid		__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_refdac_measurements_t	refdac_measurements	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_vgdac_measurements_t	vgdac_measurements	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_level_compc_measurements_t	level_compc_measurements	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_mac_address_t	mac_address	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_mkk_callname_t	mkk_callname	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_regdomain_t		regdomain	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_allowed_channel_t	allowed_channel	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_default_channel_t	default_channel	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_privacy_option_t	privacy_option	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_temptype_t		temptype	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_refdac_setup_t	refdac_setup	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_vgdac_setup_t	vgdac_setup	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_level_comp_setup_t	level_comp_setup	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_trimdac_setup_t	trimdac_setup	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_ifr_setting_t	ifr_setting	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_rfr_setting_t	rfr_setting	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_baseline_t	hfa3861_baseline	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_shadow_t	hfa3861_shadow	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_ifrf_t	hfa3861_ifrf	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_chcalsp_t	hfa3861_chcalsp	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_chcali_t	hfa3861_chcali	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_nic_config_t	nic_config	__WLAN_ATTRIB_PACK__;
-	hfa384x_hfo_delay_t             hfo_delay       __WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_manf_testsp_t	hfa3861_manf_testsp	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_hfa3861_manf_testi_t	hfa3861_manf_testi	__WLAN_ATTRIB_PACK__;
-	hfa384x_pdr_end_of_pda_t	end_of_pda	__WLAN_ATTRIB_PACK__;
+	hfa384x_pdr_pcb_partnum_t	pcb_partnum;
+	hfa384x_pdr_pcb_tracenum_t	pcb_tracenum;
+	hfa384x_pdr_nic_serial_t	nic_serial;
+	hfa384x_pdr_mkk_measurements_t	mkk_measurements;
+	hfa384x_pdr_nic_ramsize_t	nic_ramsize;
+	hfa384x_pdr_mfisuprange_t	mfisuprange;
+	hfa384x_pdr_cfisuprange_t	cfisuprange;
+	hfa384x_pdr_nicid_t		nicid;
+	hfa384x_pdr_refdac_measurements_t	refdac_measurements;
+	hfa384x_pdr_vgdac_measurements_t	vgdac_measurements;
+	hfa384x_pdr_level_compc_measurements_t	level_compc_measurements;
+	hfa384x_pdr_mac_address_t	mac_address;
+	hfa384x_pdr_mkk_callname_t	mkk_callname;
+	hfa384x_pdr_regdomain_t		regdomain;
+	hfa384x_pdr_allowed_channel_t	allowed_channel;
+	hfa384x_pdr_default_channel_t	default_channel;
+	hfa384x_pdr_privacy_option_t	privacy_option;
+	hfa384x_pdr_temptype_t		temptype;
+	hfa384x_pdr_refdac_setup_t	refdac_setup;
+	hfa384x_pdr_vgdac_setup_t	vgdac_setup;
+	hfa384x_pdr_level_comp_setup_t	level_comp_setup;
+	hfa384x_pdr_trimdac_setup_t	trimdac_setup;
+	hfa384x_pdr_ifr_setting_t	ifr_setting;
+	hfa384x_pdr_rfr_setting_t	rfr_setting;
+	hfa384x_pdr_hfa3861_baseline_t	hfa3861_baseline;
+	hfa384x_pdr_hfa3861_shadow_t	hfa3861_shadow;
+	hfa384x_pdr_hfa3861_ifrf_t	hfa3861_ifrf;
+	hfa384x_pdr_hfa3861_chcalsp_t	hfa3861_chcalsp;
+	hfa384x_pdr_hfa3861_chcali_t	hfa3861_chcali;
+	hfa384x_pdr_nic_config_t	nic_config;
+	hfa384x_hfo_delay_t             hfo_delay;
+	hfa384x_pdr_hfa3861_manf_testsp_t	hfa3861_manf_testsp;
+	hfa384x_pdr_hfa3861_manf_testi_t	hfa3861_manf_testi;
+	hfa384x_pdr_end_of_pda_t	end_of_pda;
 
-	} data			__WLAN_ATTRIB_PACK__;
+	} data;
 } __WLAN_ATTRIB_PACK__ hfa384x_pdrec_t;
 
 
diff -uNr linux-wlan-ng-0.2.7/src/prism2/include/prism2/prism2mgmt.h ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/include/prism2/prism2mgmt.h
--- linux-wlan-ng-0.2.7/src/prism2/include/prism2/prism2mgmt.h	2005-04-26 16:43:07.000000000 +0100
+++ ../../wlan-ng26-ck-svn/src/trunk-build/src/prism2/include/prism2/prism2mgmt.h	2007-02-15 23:19:34.000000000 +0000
@@ -168,9 +168,9 @@
 	UINT8 *prism2buf, p80211pstrd_t *pstr, hfa384x_t *priv );
 int prism2mgmt_get_grpaddr_index( UINT32 did );
 
-void prism2sta_processing_defer(void *data);
+void prism2sta_processing_defer(struct work_struct *data);
 
-void prism2sta_commsqual_defer(void *data);
+void prism2sta_commsqual_defer(struct work_struct *data);
 void prism2sta_commsqual_timer(unsigned long data);
 
 /*=============================================================*/
