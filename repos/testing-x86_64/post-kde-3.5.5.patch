Index: part/kateautoindent.cpp
===================================================================
--- kate/part/kateautoindent.cpp	(Revision 593570)
+++ kate/part/kateautoindent.cpp	(Arbeitskopie)
@@ -714,6 +714,7 @@
   int parenCount = 0;  // Possibly in a multiline for stmt.  Used to skip ';' ...
   bool found = false;
   bool isSpecial = false;
+  bool potentialAnchorSeen = false;
 
   //kdDebug(13030) << "calcIndent begin line:" << begin.line() << " col:" << begin.col() << endl;
 
@@ -733,7 +734,7 @@
       {
         QChar tc = textLine->getChar (pos);
         if ((tc == ';' || tc == ':' || tc == ',') && otherAnchor == -1 && parenCount <= 0)
-          otherAnchor = pos;
+          otherAnchor = pos, potentialAnchorSeen = true;
         else if (tc == ')')
           parenCount++;
         else if (tc == '(')
@@ -742,7 +743,7 @@
           openCount--;
         else if (tc == '{')
         {
-          openCount++;
+          openCount++, potentialAnchorSeen = true;
           if (openCount == 1)
             break;
         }
@@ -826,7 +827,7 @@
   }
 
   // treat beginning of document as anchor position
-  if (cur.line() == 0 && cur.col() == 0)
+  if (cur.line() == 0 && cur.col() == 0 && potentialAnchorSeen)
     found = true;
 
   if (!found) 
--- khtml/rendering/render_block.cpp	2006/10/01 15:29:15	591050
+++ khtml/rendering/render_block.cpp	2006/10/15 20:35:08	595832
@@ -224,7 +224,7 @@
         if(oldText->l >= 1) {
             oldText->ref();
             // begin: we need skip leading whitespace so that RenderBlock::findNextLineBreak
-            // won't think we're continuing from a previous run 
+            // won't think we're continuing from a previous run
             unsigned int begin = 0; // the position that first-letter begins
             unsigned int length = 0; // the position that "the rest" begins
             while ( length < oldText->l && (oldText->s+length)->isSpace() )
@@ -711,7 +711,7 @@
     int toAdd = borderBottom() + paddingBottom();
     if (m_layer && style()->scrollsOverflow() && style()->height().isVariable())
         toAdd += m_layer->horizontalScrollbarHeight();
-    if ( hasOverhangingFloats() && !style()->scrollsOverflow() && (isFloatingOrPositioned() || flowAroundFloats()) )
+    if ( hasOverhangingFloats() && (isFloatingOrPositioned() || flowAroundFloats()) )
         m_overflowHeight = m_height = floatBottom() + toAdd;
 
     int oldHeight = m_height;
@@ -930,7 +930,7 @@
         RenderObject* compactChild = compactInfo.compact();
         if (compactChild->height() > child->height())
             m_height += compactChild->height() - child->height();
-    } 
+    }
 }
 
 void RenderBlock::insertCompactIfNeeded(RenderObject* child, CompactInfo& compactInfo)
--- kdeprint/cups/kmcupsmanager.cpp	2006/09/20 15:38:41	586782
+++ kdelibs/kdeprint/cups/kmcupsmanager.cpp	2006/10/10 12:34:30	594190
@@ -920,7 +920,7 @@
 	kdDebug(500) << "Checking for update possible" << endl;
 	delete m_socket;
         m_socket = new KNetwork::KBufferedSocket;
-	m_socket->setTimeout( 1 );
+	m_socket->setTimeout( 1500 );
 	connect( m_socket, SIGNAL( connected(const KResolverEntry&) ), 
                 SLOT( slotConnectionSuccess() ) );
 	connect( m_socket, SIGNAL( gotError( int ) ), SLOT( slotConnectionFailed( int ) ) );
@@ -958,7 +958,7 @@
 
 void KMCupsManager::slotAsyncConnect()
 {
-	kdDebug(500) << "Starting async connect" << endl;
+	kdDebug(500) << "Starting async connect to " << CupsInfos::self()->hostaddr() << endl;
 	//m_socket->startAsyncConnect();
         if (CupsInfos::self()->host().startsWith("/"))
             m_socket->connect( QString(), CupsInfos::self()->host());
