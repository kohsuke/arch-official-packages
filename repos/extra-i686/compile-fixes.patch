Index: configure.in
===================================================================
--- configure.in	(revision 3446)
+++ configure.in	(revision 3447)
@@ -1,5 +1,5 @@
 AC_PREREQ(2.56)
-AC_INIT([dasher],[4.7.0],[http://bugzilla.gnome.org/enter_bug.cgi?product=dasher])
+AC_INIT([dasher],[4.7.1],[http://bugzilla.gnome.org/enter_bug.cgi?product=dasher])
 AC_REVISION([$Id: configure.in,v])
 AC_CONFIG_SRCDIR([Src/main.cc])
 AC_CONFIG_HEADERS(config.h)
@@ -362,6 +362,7 @@
 AM_CONDITIONAL(DOQTE, test x$WITHQTE = xtrue)
 AM_CONDITIONAL(GNOME_SPEECH, test x$WITHSPEECH = xtrue)
 AM_CONDITIONAL(GNOME_A11Y, test x$WITHA11Y = xtrue)
+AM_CONDITIONAL(GNOME_HELP, test x$WITHGNOME = xtrue)
 AM_CONDITIONAL(WITH_GPE, test x$WITHGPE = xtrue)
 AM_CONDITIONAL(WITH_MAEMO, test x$WITHMAEMO = xtrue)
 AM_CONDITIONAL(WITH_MAEMOFULLSCREEN, test x$WITHMAEMOFULLSCREEN = xtrue)
@@ -412,9 +413,10 @@
 AC_SUBST(GTK2BUILD_LIBS)
 
 if [[ x"$WITHGNOME" = xtrue ]]; then
-GNOME_DOC_INIT
+  GNOME_DOC_INIT
 else
-AM_CONDITIONAL(ENABLE_SK, false)
+  # Allows compilation if --without-gnome is passed
+  AM_CONDITIONAL(ENABLE_SK, test "x$enable_scrollkeeper" = "xyes")
 fi
 
 AC_CONFIG_FILES([Data/dasher.desktop.in
Index: Src/DasherCore/GameLevel.h
===================================================================
--- Src/DasherCore/GameLevel.h	(revision 3446)
+++ Src/DasherCore/GameLevel.h	(revision 3447)
@@ -129,8 +129,8 @@
 class Dasher::GameMode::Level2 : public Dasher::GameMode::Level {
 public:
   Level2(CDasherGameMode* pGameParent):Level(pGameParent),
-    oldTime(0), oldNats(0.0), m_dCurrentScore(0), m_iErrorSize(2048),
-    bFixing(false), bMadeError(false), iErrors(0)
+    oldTime(0), m_dCurrentScore(0), oldNats(0.0), iErrors(0),
+    m_iErrorSize(2048), bFixing(false), bMadeError(false)
   {
     // In level 2, the flashing arrow is mainly off
     m_iOscillatorOn=500;
@@ -166,8 +166,8 @@
 class Dasher::GameMode::Level1 : public Dasher::GameMode::Level {
 public:
   Level1(CDasherGameMode* pGameParent):Level(pGameParent),
-   oldTime(0), oldNats(0.0), m_dCurrentScore(0), m_iErrorSize(2048),
-   bFixing(false), bMadeError(false), iErrors(0)
+   oldTime(0), m_dCurrentScore(0), oldNats(0.0), iErrors(0),
+   m_iErrorSize(2048), bFixing(false), bMadeError(false)
   {
     // In Level 1, the flashing arrow is often on
     m_iOscillatorOn=1000;
Index: Src/DasherCore/SettingsStore.cpp
===================================================================
--- Src/DasherCore/SettingsStore.cpp	(revision 3446)
+++ Src/DasherCore/SettingsStore.cpp	(revision 3447)
@@ -12,6 +12,8 @@
 #include "Event.h"
 #include "EventHandler.h"
 
+#include <cstring>
+#include <cstdlib>
 #include <iostream>
 
 using namespace std;
Index: Src/DasherCore/DasherGameMode.cpp
===================================================================
--- Src/DasherCore/DasherGameMode.cpp	(revision 3446)
+++ Src/DasherCore/DasherGameMode.cpp	(revision 3447)
@@ -772,13 +772,13 @@
 
   if(m_Target.iTargetY < a && m_Target.iCenterY < m_iCrossY-defaultlength/2)
     {
-      myint x = sqrt((double)(r*r-pow((double)(m_Target.iCenterY-a),2)));
-      iLength = sqrt((double)(pow((double)(x-m_iCrossX),2)+pow((double)(a-m_iCrossY),2)));
+      myint x = (myint) sqrt((double)(r*r-pow((double)(m_Target.iCenterY-a),2)));
+      iLength = (myint) sqrt((double)(pow((double)(x-m_iCrossX),2)+pow((double)(a-m_iCrossY),2)));
     }
   else if(m_Target.iTargetY > 2*m_iCrossY-a && m_Target.iCenterY > m_iCrossY+defaultlength/2)
     {
-      myint x = sqrt((double)(r*r-pow((double)(m_Target.iCenterY+a-2*m_iCrossY),2)));
-      iLength = sqrt((double)(pow((double)(x-m_iCrossX),2)+pow((double)(a-m_iCrossY),2)));
+      myint x = (myint) sqrt((double)(r*r-pow((double)(m_Target.iCenterY+a-2*m_iCrossY),2)));
+      iLength = (myint) sqrt((double)(pow((double)(x-m_iCrossX),2)+pow((double)(a-m_iCrossY),2)));
     }
   else
     iLength = defaultlength;
@@ -788,8 +788,8 @@
 
   for(int n = 1; n < noOfPoints; ++n)
     {
-      iX[n] = cos(angle)*(iX[n-1]) - sin(angle)*(iY[n-1]-m_Target.iCenterY);
-      iY[n] = m_Target.iCenterY + sin(angle)*(iX[n-1]) + cos(angle)*(iY[n-1]-m_Target.iCenterY);
+      iX[n] = (myint) (cos(angle)*(iX[n-1]) - sin(angle)*(iY[n-1]-m_Target.iCenterY));
+      iY[n] = (myint) (m_Target.iCenterY + sin(angle)*(iX[n-1]) + cos(angle)*(iY[n-1]-m_Target.iCenterY));
     }
   //...then plot it.
   pView->DasherPolyarrow(iX, iY, noOfPoints, GetLongParameter(LP_LINE_WIDTH)*4, gameColour, 1.414);
Index: Src/DasherCore/UserLogTrial.cpp
===================================================================
--- Src/DasherCore/UserLogTrial.cpp	(revision 3446)
+++ Src/DasherCore/UserLogTrial.cpp	(revision 3447)
@@ -1,5 +1,6 @@
 #include "../Common/Common.h"
 
+#include <cstring>
 #include "UserLogTrial.h"
 
 // Track memory leaks on Windows to the line that new'd the memory
Index: Src/DasherCore/TimeSpan.cpp
===================================================================
--- Src/DasherCore/TimeSpan.cpp	(revision 3446)
+++ Src/DasherCore/TimeSpan.cpp	(revision 3447)
@@ -1,6 +1,7 @@
 
 #include "../Common/Common.h"
 
+#include <cstring>
 #include "TimeSpan.h"
 
 #ifdef _WIN32
Index: Src/DasherCore/FileLogger.cpp
===================================================================
--- Src/DasherCore/FileLogger.cpp	(revision 3446)
+++ Src/DasherCore/FileLogger.cpp	(revision 3447)
@@ -1,6 +1,7 @@
 
 #include "../Common/Common.h"
 
+#include <cstring>
 #include "FileLogger.h"
 
 // Track memory leaks on Windows to the line that new'd the memory
Index: Src/DasherCore/UserLog.cpp
===================================================================
--- Src/DasherCore/UserLog.cpp	(revision 3446)
+++ Src/DasherCore/UserLog.cpp	(revision 3447)
@@ -2,6 +2,7 @@
 
 #include "UserLog.h"
 #include <fstream>
+#include <cstring>
 
 #ifdef _WIN32
 #include <sys/timeb.h>
Index: Src/DasherCore/LanguageModelling/HashTable.h
===================================================================
--- Src/DasherCore/LanguageModelling/HashTable.h	(revision 3446)
+++ Src/DasherCore/LanguageModelling/HashTable.h	(revision 3447)
@@ -1,6 +1,6 @@
 // HashTable.h
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -40,4 +40,4 @@
 
 } // end namespace 
 
-#endif // __Hashtable_h__
\ No newline at end of file
+#endif // __Hashtable_h__
Index: Src/DasherCore/LanguageModelling/CTWLanguageModel.cpp
===================================================================
--- Src/DasherCore/LanguageModelling/CTWLanguageModel.cpp	(revision 3446)
+++ Src/DasherCore/LanguageModelling/CTWLanguageModel.cpp	(revision 3447)
@@ -1,6 +1,6 @@
 // CTWLanguageModel.cpp
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -25,6 +25,7 @@
 //#include "stdafx.h"
 #include "CTWLanguageModel.h"
 #include <math.h> // not in use anymore? needed it for log
+#include <cstring>
 
 using namespace Dasher;
 
@@ -55,7 +56,7 @@
 	NrBits = 9;    // number of bits used for representation of probabilities
 	MaxValue = (1<<NrBits) -1;
     	
-    NrPhases = ceil(log((double)(GetSize()))/log(2.0)); // number of bits per input-symbol
+    NrPhases = (int)ceil(log((double)(GetSize()))/log(2.0)); // number of bits per input-symbol
 	Tree = new CCTWNode[MaxNrNodes]; // create array with all CCTWNodes. 
 	
 	// Fill RootIndex table with indices of the RootNodes <- now I round up to next power of 2, should only create for possible symbols
@@ -320,7 +321,6 @@
   {	// find indices of the tree nodes corresponding to the context
 	
 	int *Index = new int[Context.Context.size()+1]; // +1 for the rootnode	 
-	int phase = 0;
 	int ValidDepth = 0;	
 	for (int phase = 0;phase<NrPhases;phase++) 
 	{
Index: Src/DasherCore/LanguageModelling/CTWLanguageModel.h
===================================================================
--- Src/DasherCore/LanguageModelling/CTWLanguageModel.h	(revision 3446)
+++ Src/DasherCore/LanguageModelling/CTWLanguageModel.h	(revision 3447)
@@ -1,6 +1,6 @@
 // CTWLanguageModel.h
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -55,7 +55,7 @@
 	}
 
 	Dasher::CHashTable HashTable; // Hashtable used for storing CCTWNodes in an array
-      int MaxDepth;	// Maximum depth of the tree
+      unsigned int MaxDepth;	// Maximum depth of the tree
 	int MaxTries;	// Determines how many times to try to find an empty index for a new node (max number of collisions)
 	int alpha;		// Parameter of the KT-estimator 
 	
Index: Src/DasherCore/Alphabet/AlphIO.cpp
===================================================================
--- Src/DasherCore/Alphabet/AlphIO.cpp	(revision 3446)
+++ Src/DasherCore/Alphabet/AlphIO.cpp	(revision 3447)
@@ -22,6 +22,7 @@
 #include "AlphIO.h"
 
 #include <iostream>
+#include <cstring>
 
 using namespace Dasher;
 using namespace std;
Index: Src/DasherCore/ControlManager.cpp
===================================================================
--- Src/DasherCore/ControlManager.cpp	(revision 3446)
+++ Src/DasherCore/ControlManager.cpp	(revision 3447)
@@ -21,6 +21,7 @@
 #include "../Common/Common.h"
 
 #include "ControlManager.h"
+#include <cstring>
 
 using namespace Dasher;
 using namespace std;
Index: Src/DasherCore/DasherInterfaceBase.cpp
===================================================================
--- Src/DasherCore/DasherInterfaceBase.cpp	(revision 3446)
+++ Src/DasherCore/DasherInterfaceBase.cpp	(revision 3447)
@@ -1,6 +1,6 @@
 // DasherInterfaceBase.cpp
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -358,7 +358,7 @@
     }
   }
   else if(pEvent->m_iEventType == EV_LOCK) {
-    CLockEvent *pLockEvent(static_cast<CLockEvent *>(pEvent));
+//    CLockEvent *pLockEvent(static_cast<CLockEvent *>(pEvent));
 
 //     // TODO: Sort this out - at the moment these don't occur in pairs, so the old boolean variable is still needed
 //     if(pLockEvent->m_bLock) {
Index: Src/DasherCore/DasherModel.cpp
===================================================================
--- Src/DasherCore/DasherModel.cpp	(revision 3446)
+++ Src/DasherCore/DasherModel.cpp	(revision 3447)
@@ -1,6 +1,6 @@
 // DasherModel.cpp
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -21,6 +21,7 @@
 #include "../Common/Common.h"
 
 #include <iostream>
+#include <cstring>
 #include "../Common/Random.h"
 #include "DasherModel.h"
 #include "DasherView.h"
@@ -213,8 +214,6 @@
 void CDasherModel::RebuildAroundNode(CDasherNode *pNode) {
   DASHER_ASSERT(pNode != NULL);
 
-  CDasherNode *pNodeOrig = pNode;
-
   while(pNode->GetFlag(NF_SUBNODE))
     pNode = pNode->Parent();
 
@@ -927,7 +926,6 @@
   CDasherNode *pOldNode = Get_node_under_crosshair();
 
   CDasherNode *root(m_Root);
-  CDasherNode::ChildMap & children = m_Root->Children();
 
   if(!(m_Root->GetFlag(NF_SUPER))) {
     Reparent_root(root->Lbnd(), root->Hbnd());
@@ -998,8 +996,8 @@
       double dFraction = s / static_cast<double>(iSteps - 1);
       
       SGotoItem sNewItem;
-      sNewItem.iN1 = m_Rootmin - dFraction * iOffset;
-      sNewItem.iN2 = m_Rootmax - dFraction * iOffset;
+      sNewItem.iN1 = m_Rootmin - static_cast<myint>(dFraction * iOffset);
+      sNewItem.iN2 = m_Rootmax - static_cast<myint>(dFraction * iOffset);
       
       m_deGotoQueue.push_back(sNewItem);
     }
@@ -1028,8 +1026,8 @@
       double dFraction = s / static_cast<double>(iSteps - 1);
       
       SGotoItem sNewItem;
-      sNewItem.iN1 = (m_Rootmin - iC) * exp(dFraction/dTau) + iC;
-      sNewItem.iN2 = (m_Rootmax - iC) * exp(dFraction/dTau) + iC;
+      sNewItem.iN1 = static_cast<myint>((m_Rootmin - iC) * exp(dFraction/dTau)) + iC;
+      sNewItem.iN2 = static_cast<myint>((m_Rootmax - iC) * exp(dFraction/dTau)) + iC;
       
       m_deGotoQueue.push_back(sNewItem);
     }
Index: Src/DasherCore/XMLUtil.cpp
===================================================================
--- Src/DasherCore/XMLUtil.cpp	(revision 3446)
+++ Src/DasherCore/XMLUtil.cpp	(revision 3447)
@@ -1,6 +1,8 @@
 
 #include "../Common/Common.h"
 
+#include <cstring>
+
 #include "XMLUtil.h"
 
 #include <sys/types.h>
Index: Src/DasherCore/GameLevel.cpp
===================================================================
--- Src/DasherCore/GameLevel.cpp	(revision 3446)
+++ Src/DasherCore/GameLevel.cpp	(revision 3447)
@@ -66,7 +66,7 @@
       m_strPerformance << "You also get a bonus of " << bonusPoints << " for only making only "
 		       << iErrors << " errors.\n";
     }
-  int speed = 14426*m_pScorer->GetNats()/double(m_pScorer->GetTime());
+  int speed = (int)(14426*m_pScorer->GetNats()/double(m_pScorer->GetTime()));
   int speedBonus = std::max((speed-15)*5,0);
   if(speedBonus != 0)
     m_strPerformance << "You also get a writing speed bonus of " << speedBonus << "\n";
@@ -143,7 +143,7 @@
       m_strPerformance << "You also get a bonus of " << bonusPoints << " for only making only "
 		       << iErrors << " errors.\n";
     }
-  int speed = 14426*m_pScorer->GetNats()/double(m_pScorer->GetTime());
+  int speed = (int)(14426*m_pScorer->GetNats()/double(m_pScorer->GetTime()));
   int speedBonus = std::max((speed-15)*5,0);
   if(speedBonus != 0)
     m_strPerformance << "You also get a writing speed bonus of " << speedBonus << "\n";
@@ -152,4 +152,4 @@
   m_dSentenceScore=0.0;
   m_bIsCompleted = (m_iLevelScore>450);
   Reset();
-}
\ No newline at end of file
+}
Index: Src/DasherCore/ConversionManager.cpp
===================================================================
--- Src/DasherCore/ConversionManager.cpp	(revision 3446)
+++ Src/DasherCore/ConversionManager.cpp	(revision 3447)
@@ -28,6 +28,7 @@
 #include "NodeCreationManager.h"
 
 #include <iostream>
+#include <cstring>
 #include <string>
 #include <vector>
 #include <stdlib.h>
Index: Src/DasherCore/DasherView.cpp
===================================================================
--- Src/DasherCore/DasherView.cpp	(revision 3446)
+++ Src/DasherCore/DasherView.cpp	(revision 3447)
@@ -1,6 +1,6 @@
 // DasherView.cpp
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -152,8 +152,8 @@
   for(int i(0); i < n; ++i)
     Dasher2Screen(x[i], y[i], ScreenPoints[i].x, ScreenPoints[i].y);
 
-  int iXvec = (ScreenPoints[n-2].x - ScreenPoints[n-1].x)*dArrowSizeFactor;
-  int iYvec = (ScreenPoints[n-2].y - ScreenPoints[n-1].y)*dArrowSizeFactor;
+  int iXvec = (int)((ScreenPoints[n-2].x - ScreenPoints[n-1].x)*dArrowSizeFactor);
+  int iYvec = (int)((ScreenPoints[n-2].y - ScreenPoints[n-1].y)*dArrowSizeFactor);
 
   ScreenPoints[n].x   = ScreenPoints[n-1].x + iXvec + iYvec;
   ScreenPoints[n].y   = ScreenPoints[n-1].y - iXvec + iYvec;
Index: Src/DasherCore/ColourIO.cpp
===================================================================
--- Src/DasherCore/ColourIO.cpp	(revision 3446)
+++ Src/DasherCore/ColourIO.cpp	(revision 3447)
@@ -5,6 +5,8 @@
 #include "../Common/Common.h"
 
 #include "ColourIO.h"
+#include <cstring>
+
 using namespace Dasher;
 using namespace std;
 //using namespace expat;
Index: Src/DasherCore/DasherViewSquare.cpp
===================================================================
--- Src/DasherCore/DasherViewSquare.cpp	(revision 3446)
+++ Src/DasherCore/DasherViewSquare.cpp	(revision 3447)
@@ -1,6 +1,6 @@
 // DasherViewSquare.cpp
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -50,8 +50,6 @@
 #endif
 #endif
 
-static bool g_bDebug = false;
-
 // FIXME - quite a lot of the code here probably should be moved to
 // the parent class (DasherView). I think we really should make the
 // parent class less general - we're probably not going to implement
Index: Src/Common/myassert.h
===================================================================
--- Src/Common/myassert.h	(revision 3446)
+++ Src/Common/myassert.h	(revision 3447)
@@ -1,6 +1,6 @@
 // myassert.h
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -57,7 +57,7 @@
 #else
 
 // Non-debug version (assertions disabled)
-#define DASHER_ASSERT(expr) true
+#define DASHER_ASSERT(expr) ((void)true)
 
 #endif // DEBUG
 
Index: Src/Gtk2/KeyboardHelper.cpp
===================================================================
--- Src/Gtk2/KeyboardHelper.cpp	(revision 3446)
+++ Src/Gtk2/KeyboardHelper.cpp	(revision 3447)
@@ -4,6 +4,7 @@
 #include <gdk/gdk.h>
 #include <gdk/gdkkeysyms.h>
 #include <gdk/gdkx.h>
+#include <cstring>
 #include <iostream>
 #include <sstream>
 #include <string>
Index: Src/Gtk2/Preferences.cpp
===================================================================
--- Src/Gtk2/Preferences.cpp	(revision 3446)
+++ Src/Gtk2/Preferences.cpp	(revision 3447)
@@ -2,6 +2,7 @@
 
 #include <glib/gi18n.h>
 #include <libintl.h>
+#include <cstring>
 
 #include "../Common/Common.h"
 #include "DasherTypes.h"
@@ -951,7 +952,7 @@
   
   pPrivate->pListStore = gtk_list_store_new(ACTIONS_N_COLUMNS, G_TYPE_INT, G_TYPE_STRING, G_TYPE_BOOLEAN, G_TYPE_BOOLEAN, G_TYPE_BOOLEAN);
 
-  GtkTreeIter oIter;
+//  GtkTreeIter oIter;
 
   // TODO: Reimplement this
 
Index: Src/Gtk2/DasherControl.cpp
===================================================================
--- Src/Gtk2/DasherControl.cpp	(revision 3446)
+++ Src/Gtk2/DasherControl.cpp	(revision 3447)
@@ -1,6 +1,7 @@
 #include "../Common/Common.h"
 #include "../../config.h"
 
+#include <cstring>
 #include <iostream>
 #include "DasherControl.h"
 #include "Timer.h"
Index: Src/Gtk2/dasher_main.cpp
===================================================================
--- Src/Gtk2/dasher_main.cpp	(revision 3446)
+++ Src/Gtk2/dasher_main.cpp	(revision 3447)
@@ -1,5 +1,7 @@
 #include "config.h"
 
+#include <cstring>
+
 #include <gdk/gdk.h>
 #include <gdk/gdkx.h>
 #include <glade/glade.h>
Index: Src/Gtk2/dasher_editor.cpp
===================================================================
--- Src/Gtk2/dasher_editor.cpp	(revision 3446)
+++ Src/Gtk2/dasher_editor.cpp	(revision 3447)
@@ -1,6 +1,6 @@
 // dasher_editor.cpp
 //
-// Copyright (c) 2007 The Dasher Team
+// Copyright (c) 2008 The Dasher Team
 //
 // This file is part of Dasher.
 //
@@ -96,8 +96,6 @@
 
 static guint dasher_editor_signals[SIGNAL_NUM];
 
-static DasherEditor *g_pEditor;
-
 /* TODO: Use appropriate macros here */
 /* G-object boilerplate code */
 // static void dasher_editor_class_init(DasherEditorClass *pClass);
Index: Src/Gtk2/dasher_editor_internal.h
===================================================================
--- Src/Gtk2/dasher_editor_internal.h	(revision 3446)
+++ Src/Gtk2/dasher_editor_internal.h	(revision 3447)
@@ -21,7 +21,7 @@
   CLIPBOARD_PASTE,
   CLIPBOARD_COPYALL,
   CLIPBOARD_SELECTALL,
-  CLIPBOARD_CLEAR,
+  CLIPBOARD_CLEAR
 } clipboard_action;
 
 G_BEGIN_DECLS
Index: Src/Gtk2/dasher_editor_internal.cpp
===================================================================
--- Src/Gtk2/dasher_editor_internal.cpp	(revision 3446)
+++ Src/Gtk2/dasher_editor_internal.cpp	(revision 3447)
@@ -1,5 +1,7 @@
 #include "config.h"
 
+#include <cstring>
+
 #include <glib/gi18n.h>
 #include <gtk/gtk.h>
 /* TODO: r4epair gnome libs flags (or get rid of entirely) */
@@ -104,7 +106,7 @@
   SIGNAL_NUM
 };
 
-static guint dasher_editor_internal_signals[SIGNAL_NUM];
+//static guint dasher_editor_internal_signals[SIGNAL_NUM];
 
 static DasherEditorInternal *g_pEditor;
 
@@ -124,7 +126,7 @@
 static void dasher_editor_internal_add_action(DasherEditor *pSelf, DasherAction *pNewAction);
 static EditorAction *dasher_editor_internal_get_action_by_id(DasherEditor *pSelf, int iID);
 static void dasher_editor_internal_rebuild_action_pane(DasherEditor *pSelf);
-static void dasher_editor_internal_display_message(DasherEditor *pSelf, DasherMessageInfo *pMessageInfo);
+//static void dasher_editor_internal_display_message(DasherEditor *pSelf, DasherMessageInfo *pMessageInfo);
 static void dasher_editor_internal_check_activity(DasherEditor *pSelf, EditorAction *pAction);
 static void dasher_editor_internal_action_save_state(DasherEditor *pSelf, EditorAction *pAction);
 
@@ -1275,12 +1277,12 @@
 }
 
 // TODO: This shouldn't be a part of the editor
-static void 
-dasher_editor_internal_display_message(DasherEditor *pSelf, DasherMessageInfo *pMessageInfo) {
-  GtkMessageDialog *pDialog = GTK_MESSAGE_DIALOG(gtk_message_dialog_new(0, GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, pMessageInfo->szMessage));
-  gtk_dialog_run(GTK_DIALOG(pDialog));
-  gtk_widget_destroy(GTK_WIDGET(pDialog));
-}
+//static void 
+//dasher_editor_internal_display_message(DasherEditor *pSelf, DasherMessageInfo *pMessageInfo) {
+//  GtkMessageDialog *pDialog = GTK_MESSAGE_DIALOG(gtk_message_dialog_new(0, GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, pMessageInfo->szMessage));
+//  gtk_dialog_run(GTK_DIALOG(pDialog));
+//  gtk_widget_destroy(GTK_WIDGET(pDialog));
+//}
 
 static void 
 dasher_editor_internal_check_activity(DasherEditor *pSelf, EditorAction *pAction) {
Index: Src/Gtk2/game_mode_helper.cpp
===================================================================
--- Src/Gtk2/game_mode_helper.cpp	(revision 3446)
+++ Src/Gtk2/game_mode_helper.cpp	(revision 3447)
@@ -26,7 +26,7 @@
 static void game_mode_helper_class_init(GameModeHelperClass * pClass);
 static void game_mode_helper_init(GameModeHelper * pControl);
 static void game_mode_helper_destroy(GObject * pObject);
-static void game_mode_helper_get_next_string(GameModeHelper *pSelf);
+//static void game_mode_helper_get_next_string(GameModeHelper *pSelf);
 static void game_mode_helper_update_target_label(GameModeHelper *pSelf);
 static void game_mode_helper_dialog_box(GameModeHelper* pSelf, const char* message);
 
@@ -169,9 +169,9 @@
   return FALSE; // TODO: Scheck semantics of return value
 }
 
+/*
 void game_mode_helper_get_next_string(GameModeHelper *pSelf) {
   GameModeHelperPrivate *pPrivate((GameModeHelperPrivate *)(pSelf->private_data));
-  /*
   if(pPrivate->szOutput)
     delete[] pPrivate->szOutput;
 
@@ -189,10 +189,10 @@
 
   gtk_dasher_control_add_game_mode_string(GTK_DASHER_CONTROL(pPrivate->pControl),
 					  pPrivate->szTarget);
-  */
-
 }
+*/
 
+/*
 void game_mode_helper_output(GameModeHelper *pSelf, const gchar *szText) {
   GameModeHelperPrivate *pPrivate((GameModeHelperPrivate *)(pSelf->private_data));
 
@@ -204,13 +204,16 @@
   //  if(!strcmp(pPrivate->szOutput, pPrivate->szTarget))
   //    game_mode_helper_get_next_string(pSelf);
 }
+*/
 
+/*
 void game_mode_helper_delete(GameModeHelper *pSelf, int iLength) {
   GameModeHelperPrivate *pPrivate((GameModeHelperPrivate *)(pSelf->private_data));
 
   //  pPrivate->szOutput[pPrivate->iOutputLength - iLength] = '\0';
   //  pPrivate->iOutputLength -= iLength;
 }
+*/
 
 void game_mode_helper_message(GameModeHelper *pSelf, int message, const void * messagedata) {
   using namespace Dasher::GameMode;
@@ -312,7 +315,7 @@
 
 void game_mode_helper_dialog_box(GameModeHelper* pSelf, const gchar* message)
 {
-  GameModeHelperPrivate *pPrivate((GameModeHelperPrivate *)(pSelf->private_data));
+  //  GameModeHelperPrivate *pPrivate((GameModeHelperPrivate *)(pSelf->private_data));
 
   GtkWidget* pDialog;
   pDialog = gtk_message_dialog_new(NULL,
Index: Src/Gtk2/DasherAppSettings.cpp
===================================================================
--- Src/Gtk2/DasherAppSettings.cpp	(revision 3446)
+++ Src/Gtk2/DasherAppSettings.cpp	(revision 3447)
@@ -6,6 +6,7 @@
 #include <gconf/gconf-enum-types.h>
 #endif
 
+#include <cstring>
 #include "DasherAppSettings.h"
 #include "../Common/AppSettingsData.h"
 
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 3446)
+++ ChangeLog	(revision 3447)
@@ -1,3 +1,7 @@
+2008-02-17  Phil Cowans  <pjc51@cam.ac.uk>
+
+	* Preparing for release
+
 2007-11-12  Phil Cowans  <pjc51@cam.ac.uk>
 
 	* Preparing for release
Index: README
===================================================================
--- README	(revision 3446)
+++ README	(revision 3447)
@@ -1,8 +1,7 @@
-Dasher Version 4.7.0
+Dasher Version 4.7.1
 --------------------
 
-This is version 4.7.0, the first in the new development series of
-Dasher releases.
+This is version 4.7.1, a bugfix update to the development series.
 
 Dasher is a zooming predictive text entry system, designed for situations
 where keyboard input is impractical (for instance, accessibility or PDAs). It
Index: Data/Help/Makefile.am
===================================================================
--- Data/Help/Makefile.am	(revision 3446)
+++ Data/Help/Makefile.am	(revision 3447)
@@ -1 +1,5 @@
-SUBDIRS = Gnome
+SUBDIRS =
+
+if GNOME_HELP
+  SUBDIRS += Gnome
+endif
Index: NEWS
===================================================================
--- NEWS	(revision 3446)
+++ NEWS	(revision 3447)
@@ -1,4 +1,9 @@
 ============
+Dasher 4.7.1
+============
+  * Bugfixes
+
+============
 Dasher 4.7.0
 ============
   * Starting new development series
