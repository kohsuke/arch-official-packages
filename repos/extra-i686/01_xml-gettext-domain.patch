# Description: Support calling gettext at runtime and putting the gettext domain into the .schemas file instead of replicating translations in /usr/share/gconf/schemas/*.schemas *and* /var/lib/gconf/defaults/%gconf-tree-$LANG.xml. This saves in the order of 90 MB uncompressed/10 MB compressed on hard disks.
# Ubuntu: https://bugs.launchpad.net/bugs/123025
# Upstream: http://bugzilla.gnome.org/show_bug.cgi?id=568845
diff -Nur -x '*.orig' -x '*~' gconf-2.25.0/backends/markup-tree.c gconf-2.25.0.new/backends/markup-tree.c
--- gconf-2.25.0/backends/markup-tree.c	2009-01-10 05:55:08.000000000 +0100
+++ gconf-2.25.0.new/backends/markup-tree.c	2009-01-23 12:11:48.000000000 +0100
@@ -52,6 +52,7 @@
   char       *schema_name;
   char       *mod_user;
   GTime       mod_time;
+  char       *gettext_domain;
 };
 
 static LocalSchemaInfo* local_schema_info_new  (void);
@@ -1351,6 +1352,7 @@
     gconf_value_free (entry->value);
   g_free (entry->schema_name);
   g_free (entry->mod_user);
+  g_free (entry->gettext_domain);
 
   g_slist_foreach (entry->local_schemas,
                    (GFunc) local_schema_info_free,
@@ -1593,6 +1595,8 @@
                              gconf_schema_get_type (schema));
       gconf_schema_set_owner (current_schema,
                               gconf_schema_get_owner (schema));
+      gconf_schema_set_gettext_domain (current_schema,
+                              gconf_schema_get_gettext_domain (schema));
     }
 
   /* Update mod time */
@@ -1805,6 +1809,8 @@
       else if (c_local_schema && c_local_schema->long_desc)
         gconf_schema_set_long_desc (schema, c_local_schema->long_desc);
 
+      gconf_schema_set_gettext_domain (schema, entry->gettext_domain);
+
       return retval;
     }
 }
@@ -2339,8 +2345,9 @@
   const char *ltype;
   const char *list_type;
   const char *owner;
+
   GConfValueType vtype;
-  const char *dummy1, *dummy2, *dummy3, *dummy4;
+  const char *dummy1, *dummy2, *dummy3, *dummy4, *dummy5;
   
 #if 0
   g_assert (ELEMENT_IS ("entry") ||
@@ -2377,6 +2384,7 @@
                           "muser", &dummy2,
                           "mtime", &dummy3,
                           "schema", &dummy4,
+                          "gettext_domain", &dummy5,
 
                           NULL))
     return;
@@ -2682,6 +2690,7 @@
       const char *mtime;
       const char *schema;
       const char *type;
+      const char *gettext_domain;
       const char *dummy1, *dummy2, *dummy3, *dummy4;
       const char *dummy5, *dummy6, *dummy7;
       GConfValue *value;
@@ -2692,6 +2701,7 @@
       mtime = NULL;
       schema = NULL;
       type = NULL;
+      gettext_domain = NULL;
 
       if (!locate_attributes (context, element_name, attribute_names, attribute_values,
                               error,
@@ -2700,6 +2710,7 @@
                               "mtime", &mtime,
                               "schema", &schema,
                               "type", &type,
+                              "gettext_domain", &gettext_domain,
                           
                               /* These are allowed but we don't use them until
                                * parse_value_element
@@ -2767,6 +2778,9 @@
        */
       if (schema)
         entry->schema_name = g_strdup (schema);
+
+      if (gettext_domain)
+        entry->gettext_domain = g_strdup (gettext_domain);
     }
   else
     {
@@ -3705,6 +3719,7 @@
         GConfSchema *schema;
         GConfValueType stype;
         const char *owner;
+        const char *gettext_domain;
         
         schema = gconf_value_get_schema (value);
 
@@ -3730,6 +3745,23 @@
             
             g_free (s);
           }
+
+        gettext_domain = gconf_schema_get_gettext_domain (schema);
+        
+        if (gettext_domain)
+          {
+            char *s;
+
+            s = g_markup_escape_text (gettext_domain, -1);
+            
+            if (fprintf (f, " gettext_domain=\"%s\"", s) < 0)
+              {
+                g_free (s);
+                return FALSE;
+              }
+            
+            g_free (s);
+          }
         
         if (stype == GCONF_VALUE_LIST)
           {
diff -Nur -x '*.orig' -x '*~' gconf-2.25.0/gconf/gconf-schema.c gconf-2.25.0.new/gconf/gconf-schema.c
--- gconf-2.25.0/gconf/gconf-schema.c	2009-01-10 05:55:07.000000000 +0100
+++ gconf-2.25.0.new/gconf/gconf-schema.c	2009-01-23 12:11:48.000000000 +0100
@@ -35,6 +35,7 @@
   gchar* owner;        /* Name of creating application */
   gchar* short_desc;   /* 40 char or less description, no newlines */
   gchar* long_desc;    /* could be a paragraph or so */
+  gchar* gettext_domain; /* description gettext domain */
   GConfValue* default_value; /* Default value of the key */
 } GConfRealSchema;
 
@@ -63,6 +64,7 @@
   g_free (real->locale);
   g_free (real->short_desc);
   g_free (real->long_desc);
+  g_free (real->gettext_domain);
   g_free (real->owner);
 
   if (real->default_value)
@@ -91,6 +93,8 @@
 
   dest->long_desc = g_strdup (real->long_desc);
 
+  dest->gettext_domain = g_strdup (real->gettext_domain);
+
   dest->owner = g_strdup (real->owner);
 
   dest->default_value = real->default_value ? gconf_value_copy (real->default_value) : NULL;
@@ -136,6 +140,20 @@
     REAL_SCHEMA (sc)->locale = NULL;
 }
 
+void
+gconf_schema_set_gettext_domain (GConfSchema* sc, const gchar* domain)
+{
+  g_return_if_fail (domain == NULL || g_utf8_validate (domain, -1, NULL));
+  
+  if (REAL_SCHEMA (sc)->gettext_domain)
+    g_free (REAL_SCHEMA (sc)->gettext_domain);
+
+  if (domain)
+    REAL_SCHEMA (sc)->gettext_domain = g_strdup (domain);
+  else 
+    REAL_SCHEMA (sc)->gettext_domain = NULL;
+}
+
 void          
 gconf_schema_set_short_desc (GConfSchema* sc, const gchar* desc)
 {
@@ -228,6 +246,14 @@
       return FALSE;
     }
 
+  if (real->gettext_domain && !g_utf8_validate (real->gettext_domain, -1, NULL))
+    {
+      g_set_error (err, GCONF_ERROR,
+                   GCONF_ERROR_FAILED,
+                   _("Schema contains invalid UTF-8"));
+      return FALSE;
+    }
+
   if (real->owner && !g_utf8_validate (real->owner, -1, NULL))
     {
       g_set_error (err, GCONF_ERROR,
@@ -299,11 +325,22 @@
 }
 
 const char*
+gconf_schema_get_gettext_domain (const GConfSchema *schema)
+{
+  g_return_val_if_fail (schema != NULL, NULL);
+
+  return REAL_SCHEMA (schema)->gettext_domain;
+}
+
+const char*
 gconf_schema_get_short_desc (const GConfSchema *schema)
 {
   g_return_val_if_fail (schema != NULL, NULL);
 
-  return REAL_SCHEMA (schema)->short_desc;
+ if (REAL_SCHEMA (schema)->gettext_domain)
+    return g_dgettext(REAL_SCHEMA (schema)->gettext_domain, REAL_SCHEMA (schema)->short_desc);
+  else
+    return REAL_SCHEMA (schema)->short_desc;
 }
 
 const char*
@@ -311,7 +348,10 @@
 {
   g_return_val_if_fail (schema != NULL, NULL);
 
-  return REAL_SCHEMA (schema)->long_desc;
+  if (REAL_SCHEMA (schema)->gettext_domain)
+    return dgettext(REAL_SCHEMA (schema)->gettext_domain, REAL_SCHEMA (schema)->long_desc);
+  else
+    return REAL_SCHEMA (schema)->long_desc;
 }
 
 const char*
diff -Nur -x '*.orig' -x '*~' gconf-2.25.0/gconf/gconf-schema.h gconf-2.25.0.new/gconf/gconf-schema.h
--- gconf-2.25.0/gconf/gconf-schema.h	2009-01-10 05:55:07.000000000 +0100
+++ gconf-2.25.0.new/gconf/gconf-schema.h	2009-01-23 12:11:48.000000000 +0100
@@ -48,6 +48,8 @@
                                             GConfValueType  type);
 void gconf_schema_set_locale               (GConfSchema    *sc,
                                             const gchar    *locale);
+void gconf_schema_set_gettext_domain       (GConfSchema    *sc,
+                                            const gchar    *domain);
 void gconf_schema_set_short_desc           (GConfSchema    *sc,
                                             const gchar    *desc);
 void gconf_schema_set_long_desc            (GConfSchema    *sc,
@@ -65,6 +67,7 @@
 GConfValueType gconf_schema_get_car_type      (const GConfSchema *schema);
 GConfValueType gconf_schema_get_cdr_type      (const GConfSchema *schema);
 const char*    gconf_schema_get_locale        (const GConfSchema *schema);
+const char*    gconf_schema_get_gettext_domain(const GConfSchema *schema);
 const char*    gconf_schema_get_short_desc    (const GConfSchema *schema);
 const char*    gconf_schema_get_long_desc     (const GConfSchema *schema);
 const char*    gconf_schema_get_owner         (const GConfSchema *schema);
diff -Nur -x '*.orig' -x '*~' gconf-2.25.0/gconf/gconftool.c gconf-2.25.0.new/gconf/gconftool.c
--- gconf-2.25.0/gconf/gconftool.c	2009-01-10 05:55:07.000000000 +0100
+++ gconf-2.25.0.new/gconf/gconftool.c	2009-01-23 12:11:48.000000000 +0100
@@ -3293,6 +3293,7 @@
   GConfValueType cdr_type;
   GConfValue* global_default;
   GHashTable* hash;
+  gchar* gettext_domain;
 };
 
 static int
@@ -3545,6 +3546,15 @@
               else
                 g_printerr (_("WARNING: empty <applyto> node"));
             }
+          else if (strcmp((char *)iter->name, "gettext_domain") == 0)
+            {
+              tmp = (char *)xmlNodeGetContent(iter);
+              if (tmp)
+                {
+                  info->gettext_domain = g_strdup(tmp);
+                  xmlFree(tmp);
+                }
+            }
           else
             g_printerr (_("WARNING: node <%s> not understood below <schema>\n"),
 			iter->name);
@@ -3634,6 +3644,9 @@
   if (info->owner != NULL)
     gconf_schema_set_owner(schema, info->owner);
 
+  if (info->gettext_domain != NULL)
+    gconf_schema_set_gettext_domain(schema, info->gettext_domain);
+
   xmlFree(name);
 
   /* Locale-specific info */
@@ -3763,6 +3776,7 @@
   info.apply_to = NULL;
   info.owner = NULL;
   info.global_default = NULL;
+  info.gettext_domain = NULL;
   info.hash = g_hash_table_new(g_str_hash, g_str_equal);
   
   extract_global_info(node, &info);
@@ -3799,6 +3813,8 @@
             ;  /* nothing */
           else if (strcmp((char *)iter->name, "applyto") == 0)
             ;  /* nothing */
+          else if (strcmp((char *)iter->name, "gettext_domain") == 0)
+            ;  /* nothing */
           else if (strcmp((char *)iter->name, "locale") == 0)
             {
               process_locale_info(iter, &info);
