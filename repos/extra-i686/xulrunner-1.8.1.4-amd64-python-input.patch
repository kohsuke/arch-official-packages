diff -urNad xulrunner-1.8.0.9~/extensions/python/xpcom/src/PyGInputStream.cpp xulrunner-1.8.0.9/extensions/python/xpcom/src/PyGInputStream.cpp
--- xulrunner-1.8.0.9~/extensions/python/xpcom/src/PyGInputStream.cpp	2004-04-19 00:13:54.000000000 +0200
+++ xulrunner-1.8.0.9/extensions/python/xpcom/src/PyGInputStream.cpp	2007-01-19 17:49:19.553832250 +0100
@@ -105,7 +105,11 @@
 	if (NS_SUCCEEDED(nr)) {
 		PRUint32 py_size;
 		const void *py_buf;
+#ifdef __x86_64__
+		if (PyObject_AsReadBuffer(ret, &py_buf, (long *)&py_size)!=0) {
+#else
 		if (PyObject_AsReadBuffer(ret, &py_buf, (int *)&py_size)!=0) {
+#endif
 			PyErr_Format(PyExc_TypeError, "nsIInputStream::read() method must return a buffer object - not a '%s' object", ret->ob_type->tp_name);
 			nr = HandleNativeGatewayError(methodName);
 		} else {
diff -urNad xulrunner-1.8.0.9~/extensions/python/xpcom/src/PyIInputStream.cpp xulrunner-1.8.0.9/extensions/python/xpcom/src/PyIInputStream.cpp
--- xulrunner-1.8.0.9~/extensions/python/xpcom/src/PyIInputStream.cpp	2004-04-19 00:13:54.000000000 +0200
+++ xulrunner-1.8.0.9/extensions/python/xpcom/src/PyIInputStream.cpp	2007-01-20 16:39:36.756086250 +0100
@@ -66,7 +66,11 @@
 	PRUint32 nread;
 	void *buf;
 	PRUint32 buf_len;
+#ifdef __x86_64__
+	if (PyObject_AsWriteBuffer(obBuffer, &buf, (long *)&buf_len) != 0) {
+#else
 	if (PyObject_AsWriteBuffer(obBuffer, &buf, (int *)&buf_len) != 0) {
+#endif
 		PyErr_Clear();
 		PyErr_SetString(PyExc_TypeError, "The buffer object does not have a write buffer!");
 		return NULL;
@@ -117,7 +121,11 @@
 		if (rc != NULL) {
 			void *ob_buf;
 			PRUint32 buf_len;
+#ifdef __x86_64__
+			if (PyObject_AsWriteBuffer(rc, &ob_buf, (long *)&buf_len) != 0) {
+#else	
 			if (PyObject_AsWriteBuffer(rc, &ob_buf, (int *)&buf_len) != 0) {
+#endif
 				// should never fail - we just created it!
 				return NULL;
 			}
@@ -141,12 +149,20 @@
 	nsIInputStream *pI = GetI(self);
 	if (pI==NULL)
 		return NULL;
+#ifdef __x86_64__
+	if (PyArg_ParseTuple(args, "|i", (long *)&n))
+#else
 	if (PyArg_ParseTuple(args, "|i", (int *)&n))
+#endif
 		// This worked - no args, or just an int.
 		return DoPyRead_Size(pI, n);
 	// try our other supported arg format.
 	PyErr_Clear();
+#ifdef __x86_64__
+	if (!PyArg_ParseTuple(args, "O|i", &obBuffer, (long *)&n)) {
+#else
 	if (!PyArg_ParseTuple(args, "O|i", &obBuffer, (int *)&n)) {
+#endif
 		PyErr_Clear();
 		PyErr_SetString(PyExc_TypeError, "'read()' must be called as (buffer_ob, int_size=-1) or (int_size=-1)");
 		return NULL;
